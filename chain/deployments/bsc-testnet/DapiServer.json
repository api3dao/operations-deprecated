{
  "address": "0xCC5005Bd08b8882c9A132C0067E7D3f79796C251",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_airnodeProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "unlimitedReader",
          "type": "address"
        }
      ],
      "name": "AddedUnlimitedReader",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ExtendedWhitelistExpiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "RegisteredBeaconUpdateSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "name": "RequestedRrpBeaconUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "name": "RequestedRrpBeaconUpdateRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "setter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "RevokedIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetDapiName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "name": "SetIndefiniteWhitelistStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rrpBeaconUpdateRequester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetRrpBeaconUpdatePermissionStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "SetWhitelistExpiration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithBeacons",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithPsp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBeaconWithRrp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBeaconWithSignedData",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAPI_NAME_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "unlimitedReader",
          "type": "address"
        }
      ],
      "name": "addUnlimitedReader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airnodeProtocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditionParameters",
          "type": "bytes"
        }
      ],
      "name": "conditionPspBeaconSetUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditionParameters",
          "type": "bytes"
        }
      ],
      "name": "conditionPspBeaconUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dapiNameSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "dapiNameToDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "indefiniteWhitelistStatus",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        }
      ],
      "name": "dataFeedIdToReaderToWhitelistStatus",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "indefiniteWhitelistCount",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "name": "deriveBeaconId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        }
      ],
      "name": "deriveBeaconSetId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "extendWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillPspBeaconSetUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillPspBeaconUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fulfillRrpBeaconUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indefiniteWhitelisterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedValueWithDapiName",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedValueWithId",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithDapiName",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithId",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        }
      ],
      "name": "readerCanReadDataFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "registerBeaconUpdateSubscription",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "requestRrpBeaconUpdate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "requestRrpBeaconUpdateRelayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setter",
          "type": "address"
        }
      ],
      "name": "revokeIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "setDapiName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setIndefiniteWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rrpBeaconUpdateRequester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRrpBeaconUpdatePermissionStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expirationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "setWhitelistExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sponsorToRrpBeaconUpdateRequesterToPermissionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "subscriptionIdToBeaconId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unlimitedReaderStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        }
      ],
      "name": "updateBeaconSetWithBeacons",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "deviationThresholdInPercentage",
          "type": "uint256"
        }
      ],
      "name": "updateBeaconSetWithBeaconsAndReturnCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "airnodes",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "templateIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "timestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "updateBeaconSetWithSignedData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "updateBeaconWithSignedData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistExpirationExtenderRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistExpirationSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdffdb30e097dd463e21d1a590b5a93958ec186af8dd6e1aac30037c566188294",
  "receipt": {
    "to": null,
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": "0xCC5005Bd08b8882c9A132C0067E7D3f79796C251",
    "transactionIndex": 2,
    "gasUsed": "4850488",
    "logsBloom": "0x
    "blockHash": "0x145eec8aeecb39aa5c6f66a5795b628c9e4cd17722db6e2b1d0b07854beedda4",
    "transactionHash": "0xdffdb30e097dd463e21d1a590b5a93958ec186af8dd6e1aac30037c566188294",
    "logs": [],
    "blockNumber": 22350174,
    "cumulativeGasUsed": "4971669",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x92E5125adF385d86beDb950793526106143b6Df1",
    "DapiServer admin",
    "0x8984152339F9D35742BB878D0eaD9EF9fd6469d3",
    "0x73FF8cdEeA2770BA2B8bA1FD000090A7dd598F0b"
  ],
  "numDeployments": 1,
  "solcInputHash": "393699507a6864c7cffc93fbd9290ae4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airnodeProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unlimitedReader\",\"type\":\"address\"}],\"name\":\"AddedUnlimitedReader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ExtendedWhitelistExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"RegisteredBeaconUpdateSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"RequestedRrpBeaconUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"RequestedRrpBeaconUpdateRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"RevokedIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetDapiName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"name\":\"SetIndefiniteWhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rrpBeaconUpdateRequester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetRrpBeaconUpdatePermissionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"SetWhitelistExpiration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithBeacons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithPsp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatedBeaconWithRrp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatedBeaconWithSignedData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAPI_NAME_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INDEFINITE_WHITELISTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unlimitedReader\",\"type\":\"address\"}],\"name\":\"addUnlimitedReader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airnodeProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditionParameters\",\"type\":\"bytes\"}],\"name\":\"conditionPspBeaconSetUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditionParameters\",\"type\":\"bytes\"}],\"name\":\"conditionPspBeaconUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dapiNameSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"dapiNameToDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"indefiniteWhitelistStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"}],\"name\":\"dataFeedIdToReaderToWhitelistStatus\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"indefiniteWhitelistCount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"deriveBeaconId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"}],\"name\":\"deriveBeaconSetId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"extendWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillPspBeaconSetUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillPspBeaconUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfillRrpBeaconUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indefiniteWhitelisterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedValueWithDapiName\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedValueWithId\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithDapiName\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithId\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"}],\"name\":\"readerCanReadDataFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"registerBeaconUpdateSubscription\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"requestRrpBeaconUpdate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"requestRrpBeaconUpdateRelayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"revokeIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"setDapiName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIndefiniteWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rrpBeaconUpdateRequester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRrpBeaconUpdatePermissionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"}],\"name\":\"setWhitelistExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToRrpBeaconUpdateRequesterToPermissionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subscriptionIdToBeaconId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlimitedReaderStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"}],\"name\":\"updateBeaconSetWithBeacons\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"deviationThresholdInPercentage\",\"type\":\"uint256\"}],\"name\":\"updateBeaconSetWithBeaconsAndReturnCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airnodes\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"templateIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"updateBeaconSetWithSignedData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateBeaconWithSignedData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistExpirationExtenderRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistExpirationSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"DapiServer is a PSP requester contract. Unlike RRP, which is implemented as a central contract, PSP implementation is built into the requester for optimization. Accordingly, the checks that are not required are omitted. Some examples: - While executing a PSP Beacon update, the condition is not verified because Beacon updates where the condition returns `false` (i.e., the on-chain value is already close to the actual value) are not harmful, and are even desirable. - PSP Beacon set update subscription IDs are not verified, as the Airnode/relayer cannot be made to \\\"misreport a Beacon set update\\\" by spoofing a subscription ID. - While executing a PSP Beacon set update, even the signature is not checked because this is a purely keeper job that does not require off-chain data. Similar to Beacon updates, any Beacon set update is welcome.\",\"kind\":\"dev\",\"methods\":{\"addUnlimitedReader(address)\":{\"details\":\"Since the unlimited reader status cannot be revoked, only contracts that are adequately restricted should be given this status\",\"params\":{\"unlimitedReader\":\"Unlimited reader address\"}},\"conditionPspBeaconSetUpdate(bytes32,bytes,bytes)\":{\"details\":\"The template ID used in the respective Subscription is expected to be zero, which means the `parameters` field of the Subscription will be forwarded to this function as `data`. This field should be the Beacon ID array encoded in contract ABI.\",\"params\":{\"conditionParameters\":\"Subscription condition parameters (a `uint256` encoded in contract ABI)\",\"data\":\"Fulfillment data (array of Beacon IDs, i.e., `bytes32[]` encoded in contract ABI)\",\"subscriptionId\":\"Subscription ID\"},\"returns\":{\"_0\":\"If the Beacon set update subscription should be fulfilled\"}},\"conditionPspBeaconUpdate(bytes32,bytes,bytes)\":{\"details\":\"Reverts if not called by a void signer with zero address because this method can be used to indirectly read a Beacon. `conditionParameters` are specified within the `conditions` field of a Subscription.\",\"params\":{\"conditionParameters\":\"Subscription condition parameters (a `uint256` encoded in contract ABI)\",\"data\":\"Fulfillment data (an `int256` encoded in contract ABI)\",\"subscriptionId\":\"Subscription ID\"},\"returns\":{\"_0\":\"If the Beacon update subscription should be fulfilled\"}},\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\",\"_airnodeProtocol\":\"AirnodeProtocol contract address\",\"_manager\":\"Manager address\"}},\"dapiNameToDataFeedId(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"},\"returns\":{\"_0\":\"Data feed ID\"}},\"dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(bytes32,address,address)\":{\"params\":{\"dataFeedId\":\"Data feed ID (or dAPI name hash)\",\"reader\":\"Reader address\",\"setter\":\"Address of the account that has potentially whitelisted the reader for the data feed indefinitely\"},\"returns\":{\"indefiniteWhitelistStatus\":\"If `setter` has indefinitely whitelisted reader for the data feed\"}},\"dataFeedIdToReaderToWhitelistStatus(bytes32,address)\":{\"params\":{\"dataFeedId\":\"Data feed ID (or dAPI name hash)\",\"reader\":\"Reader address\"},\"returns\":{\"expirationTimestamp\":\"Timestamp at which the whitelisting of the reader will expire\",\"indefiniteWhitelistCount\":\"Number of times `reader` was whitelisted indefinitely for `dataFeedId`\"}},\"deriveBeaconId(address,bytes32)\":{\"params\":{\"airnode\":\"Airnode address\",\"templateId\":\"Template ID\"},\"returns\":{\"beaconId\":\"Beacon ID\"}},\"deriveBeaconSetId(bytes32[])\":{\"details\":\"Notice that `abi.encode()` is used over `abi.encodePacked()`\",\"params\":{\"beaconIds\":\"Beacon IDs\"},\"returns\":{\"beaconSetId\":\"Beacon set ID\"}},\"extendWhitelistExpiration(bytes32,address,uint64)\":{\"params\":{\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"serviceId\":\"Service ID\",\"user\":\"User address\"}},\"fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"details\":\"Similar to `conditionPspBeaconSetUpdate()`, if `templateId` of the Subscription is zero, its `parameters` field will be forwarded to `data` here, which is expect to be contract ABI-encoded array of Beacon IDs. It does not make sense for this subscription to be relayed, as there is no external data being delivered. Nevertheless, this is allowed for the lack of a reason to prevent it. Even though the consistency of the arguments are not being checked, if a standard implementation of Airnode is being used, these can be expected to be correct. Either way, the assumption is that it does not matter for the purposes of a Beacon set update subscription.\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Fulfillment data (an `int256` encoded in contract ABI)\",\"relayer\":\"Relayer address\",\"signature\":\"Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet\",\"sponsor\":\"Sponsor address\",\"subscriptionId\":\"Subscription ID\",\"timestamp\":\"Timestamp used in the signature\"}},\"fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"details\":\"There is no need to verify that `conditionPspBeaconUpdate()` returns `true` because any Beacon update is a good Beacon update\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Fulfillment data (a single `int256` encoded in contract ABI)\",\"relayer\":\"Relayer address\",\"signature\":\"Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet\",\"sponsor\":\"Sponsor address\",\"subscriptionId\":\"Subscription ID\",\"timestamp\":\"Timestamp used in the signature\"}},\"fulfillRrpBeaconUpdate(bytes32,uint256,bytes)\":{\"params\":{\"data\":\"Fulfillment data (an `int256` encoded in contract ABI)\",\"requestId\":\"Request ID\",\"timestamp\":\"Timestamp used in the signature\"}},\"getBalance(address)\":{\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Account balance\"}},\"getBlockBasefee()\":{\"returns\":{\"_0\":\"Current block basefee\"}},\"getBlockNumber()\":{\"returns\":{\"_0\":\"Current block number\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"Current block timestamp\"}},\"getChainId()\":{\"returns\":{\"_0\":\"Chain ID\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"readDataFeedValueWithDapiName(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"},\"returns\":{\"value\":\"Data feed value\"}},\"readDataFeedValueWithId(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"value\":\"Data feed value\"}},\"readDataFeedWithDapiName(bytes32)\":{\"details\":\"The read data feed may belong to a Beacon or dAPI. The reader must be whitelisted for the hash of the dAPI name.\",\"params\":{\"dapiName\":\"dAPI name\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithId(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readerCanReadDataFeed(bytes32,address)\":{\"params\":{\"dataFeedId\":\"Data feed ID (or dAPI name hash)\",\"reader\":\"Reader address\"},\"returns\":{\"_0\":\"If the reader can read the data feed\"}},\"registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)\":{\"details\":\"Similar to how one needs to call `requestRrpBeaconUpdate()` for this contract to recognize the incoming RRP fulfillment, this needs to be called before the subscription fulfillments. In addition to the subscription being registered, the sponsor must use `setPspSponsorshipStatus()` to give permission for its sponsor wallet to be used for the specific subscription.\",\"params\":{\"airnode\":\"Airnode address\",\"conditions\":\"Conditions under which the subscription is requested to be fulfilled\",\"relayer\":\"Relayer address\",\"sponsor\":\"Sponsor address\",\"templateId\":\"Template ID\"},\"returns\":{\"subscriptionId\":\"Subscription ID\"}},\"requestRrpBeaconUpdate(address,bytes32,address)\":{\"details\":\"In addition to the sponsor sponsoring this contract (by calling `setRrpSponsorshipStatus()`), the sponsor must also give update request permission to the sender (by calling `setRrpBeaconUpdatePermissionStatus()`) before this method is called. The template must specify a single point of data of type `int256` to be returned and for it to be small enough to be castable to `int224` because this is what `fulfillRrpBeaconUpdate()` expects.\",\"params\":{\"airnode\":\"Airnode address\",\"sponsor\":\"Sponsor address\",\"templateId\":\"Template ID\"},\"returns\":{\"requestId\":\"Request ID\"}},\"requestRrpBeaconUpdateRelayed(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"relayer\":\"Relayer address\",\"sponsor\":\"Sponsor address\",\"templateId\":\"Template ID\"},\"returns\":{\"requestId\":\"Request ID\"}},\"revokeIndefiniteWhitelistStatus(bytes32,address,address)\":{\"params\":{\"serviceId\":\"Service ID\",\"setter\":\"Setter of the indefinite whitelist status\",\"user\":\"User address\"}},\"setDapiName(bytes32,bytes32)\":{\"details\":\"While a data feed ID refers to a specific Beacon or Beacon set, dAPI names provide a more abstract interface for convenience. This means a dAPI name that was pointing to a Beacon can be pointed to a Beacon set, then another Beacon set, etc.\",\"params\":{\"dapiName\":\"Human-readable dAPI name\",\"dataFeedId\":\"Data feed ID the dAPI name will point to\"}},\"setIndefiniteWhitelistStatus(bytes32,address,bool)\":{\"params\":{\"serviceId\":\"Service ID\",\"status\":\"Indefinite whitelist status\",\"user\":\"User address\"}},\"setRrpBeaconUpdatePermissionStatus(address,bool)\":{\"params\":{\"rrpBeaconUpdateRequester\":\"RRP-based Beacon update requester address\",\"status\":\"Permission status\"}},\"setWhitelistExpiration(bytes32,address,uint64)\":{\"params\":{\"expirationTimestamp\":\"Timestamp at which the temporary whitelist will expire\",\"serviceId\":\"Service ID\",\"user\":\"User address\"}},\"updateBeaconSetWithBeacons(bytes32[])\":{\"details\":\"This function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. However, this is not the intended use.\",\"params\":{\"beaconIds\":\"Beacon IDs\"},\"returns\":{\"beaconSetId\":\"Beacon set ID\"}},\"updateBeaconSetWithBeaconsAndReturnCondition(bytes32[],uint256)\":{\"details\":\"This method does not allow the caller to indirectly read a Beacon set, which is why it does not require the sender to be a void signer with zero address. This allows the implementation of incentive mechanisms that rewards keepers that trigger valid dAPI updates.\",\"params\":{\"beaconIds\":\"Beacon IDs\",\"deviationThresholdInPercentage\":\"Deviation threshold in percentage where 100% is represented as `HUNDRED_PERCENT`\"}},\"updateBeaconSetWithSignedData(address[],bytes32[],uint256[],bytes[],bytes[])\":{\"params\":{\"airnodes\":\"Airnode addresses\",\"data\":\"Response data (an `int256` encoded in contract ABI per Beacon)\",\"signatures\":\"Template ID, a timestamp and the response data signed by the respective Airnode address per Beacon\",\"templateIds\":\"Template IDs\",\"timestamps\":\"Timestamps used in the signatures\"},\"returns\":{\"beaconSetId\":\"Beacon set ID\"}},\"updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)\":{\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Response data (an `int256` encoded in contract ABI)\",\"signature\":\"Template ID, a timestamp and the response data signed by the Airnode address\",\"templateId\":\"Template ID\",\"timestamp\":\"Timestamp used in the signature\"}}},\"stateVariables\":{\"HUNDRED_PERCENT\":{\"details\":\"10^8 (and not a larger number) is chosen to avoid overflows in `calculateUpdateInPercentage()`. Since the reported data needs to fit into 224 bits, its multiplication by 10^8 is guaranteed not to overflow.\"}},\"title\":\"Contract that serves Beacons, Beacon sets and dAPIs based on the Airnode protocol\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DAPI_NAME_SETTER_ROLE_DESCRIPTION()\":{\"notice\":\"dAPI name setter role description\"},\"HUNDRED_PERCENT()\":{\"notice\":\"Number that represents 100%\"},\"INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\":{\"notice\":\"Indefinite whitelister role description\"},\"WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\":{\"notice\":\"Whitelist expiration extender role description\"},\"WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\":{\"notice\":\"Whitelist expiration setter role description\"},\"accessControlRegistry()\":{\"notice\":\"AccessControlRegistry contract address\"},\"addUnlimitedReader(address)\":{\"notice\":\"Called by the manager to add the unlimited reader indefinitely\"},\"adminRole()\":{\"notice\":\"Admin role\"},\"adminRoleDescription()\":{\"notice\":\"Admin role description\"},\"airnodeProtocol()\":{\"notice\":\"AirnodeProtocol contract address\"},\"conditionPspBeaconSetUpdate(bytes32,bytes,bytes)\":{\"notice\":\"Returns if the respective Beacon set needs to be updated based on the condition parameters\"},\"conditionPspBeaconUpdate(bytes32,bytes,bytes)\":{\"notice\":\"Returns if the respective Beacon needs to be updated based on the fulfillment data and the condition parameters\"},\"dapiNameSetterRole()\":{\"notice\":\"dAPI name setter role\"},\"dapiNameToDataFeedId(bytes32)\":{\"notice\":\"Returns the data feed ID the dAPI name is set to\"},\"dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(bytes32,address,address)\":{\"notice\":\"Returns if an account has indefinitely whitelisted the reader for the data feed\"},\"dataFeedIdToReaderToWhitelistStatus(bytes32,address)\":{\"notice\":\"Returns the detailed whitelist status of the reader for the data feed\"},\"deriveBeaconId(address,bytes32)\":{\"notice\":\"Derives the Beacon ID from the Airnode address and template ID\"},\"deriveBeaconSetId(bytes32[])\":{\"notice\":\"Derives the Beacon set ID from the Beacon IDs\"},\"extendWhitelistExpiration(bytes32,address,uint64)\":{\"notice\":\"Extends the expiration of the temporary whitelist of `user` to be able to use the service with `serviceId` if the sender has the whitelist expiration extender role\"},\"fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon set update subscription\"},\"fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon update subscription\"},\"fulfillRrpBeaconUpdate(bytes32,uint256,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet through AirnodeProtocol to fulfill the request\"},\"getBalance(address)\":{\"notice\":\"Returns the account balance\"},\"getBlockBasefee()\":{\"notice\":\"Returns the current block basefee\"},\"getBlockNumber()\":{\"notice\":\"Returns the current block number\"},\"getBlockTimestamp()\":{\"notice\":\"Returns the current block timestamp\"},\"getChainId()\":{\"notice\":\"Returns the chain ID\"},\"indefiniteWhitelisterRole()\":{\"notice\":\"Indefinite whitelister role\"},\"manager()\":{\"notice\":\"Address of the manager that manages the related AccessControlRegistry roles\"},\"readDataFeedValueWithDapiName(bytes32)\":{\"notice\":\"Reads the data feed value with dAPI name\"},\"readDataFeedValueWithId(bytes32)\":{\"notice\":\"Reads the data feed value with ID\"},\"readDataFeedWithDapiName(bytes32)\":{\"notice\":\"Reads the data feed with dAPI name\"},\"readDataFeedWithId(bytes32)\":{\"notice\":\"Reads the data feed with ID\"},\"readerCanReadDataFeed(bytes32,address)\":{\"notice\":\"Returns if a reader can read the data feed\"},\"registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)\":{\"notice\":\"Registers the Beacon update subscription\"},\"requestRrpBeaconUpdate(address,bytes32,address)\":{\"notice\":\"Creates an RRP requests for the Beacon to be updated\"},\"requestRrpBeaconUpdateRelayed(address,bytes32,address,address)\":{\"notice\":\"Creates an RRP requests for the Beacon to be updated by the relayer\"},\"revokeIndefiniteWhitelistStatus(bytes32,address,address)\":{\"notice\":\"Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role\"},\"setDapiName(bytes32,bytes32)\":{\"notice\":\"Sets the data feed ID the dAPI name points to\"},\"setIndefiniteWhitelistStatus(bytes32,address,bool)\":{\"notice\":\"Sets the indefinite whitelist status of `user` to be able to use the service with `serviceId` if the sender has the indefinite whitelister role\"},\"setRrpBeaconUpdatePermissionStatus(address,bool)\":{\"notice\":\"Called by the sponsor to set the update request permission status of an account\"},\"setWhitelistExpiration(bytes32,address,uint64)\":{\"notice\":\"Sets the expiration of the temporary whitelist of `user` to be able to use the service with `serviceId` if the sender has the whitelist expiration setter role\"},\"sponsorToRrpBeaconUpdateRequesterToPermissionStatus(address,address)\":{\"notice\":\"If a sponsor has permitted an account to request RRP-based updates at this contract\"},\"subscriptionIdToBeaconId(bytes32)\":{\"notice\":\"ID of the Beacon that the subscription is registered to update\"},\"unlimitedReaderStatus(address)\":{\"notice\":\"If an account is an unlimited reader\"},\"updateBeaconSetWithBeacons(bytes32[])\":{\"notice\":\"Updates the Beacon set using the current values of its Beacons\"},\"updateBeaconSetWithBeaconsAndReturnCondition(bytes32[],uint256)\":{\"notice\":\"Updates the Beacon set using the current values of the Beacons and returns if this update was justified according to the deviation threshold\"},\"updateBeaconSetWithSignedData(address[],bytes32[],uint256[],bytes[],bytes[])\":{\"notice\":\"Updates a Beacon set using data signed by the respective Airnodes without requiring a request or subscription. The Beacons for which the signature is omitted will be read from the storage.\"},\"updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)\":{\"notice\":\"Updates a Beacon using data signed by the respective Airnode, without requiring a request or subscription\"},\"whitelistExpirationExtenderRole()\":{\"notice\":\"Whitelist expiration extender role\"},\"whitelistExpirationSetterRole()\":{\"notice\":\"Whitelist expiration setter role\"}},\"notice\":\"A Beacon is a live data feed addressed by an ID, which is derived from an Airnode address and a template ID. This is suitable where the more recent data point is always more favorable, e.g., in the context of an asset price data feed. Beacons can also be seen as one-Airnode data feeds that can be used individually or combined to build Beacon sets. dAPIs are an abstraction layer over Beacons and Beacon sets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol\":\"DapiServer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/access-control-registry/AccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./AccessControlRegistryUser.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminned.sol\\\";\\n\\n/// @title Contract to be inherited by contracts whose adminship functionality\\n/// will be implemented using AccessControlRegistry\\ncontract AccessControlRegistryAdminned is\\n    Multicall,\\n    RoleDeriver,\\n    AccessControlRegistryUser,\\n    IAccessControlRegistryAdminned\\n{\\n    /// @notice Admin role description\\n    string public override adminRoleDescription;\\n\\n    bytes32 internal immutable adminRoleDescriptionHash;\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// share the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) AccessControlRegistryUser(_accessControlRegistry) {\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(address manager)\\n        internal\\n        view\\n        returns (bytes32 adminRole)\\n    {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf09ba7f972b6bc37041596f5fd8757192fe1c63009b75752dc6f57b4eb4bb6cd\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/AccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\n\\n/// @title Contract to be inherited by contracts with manager whose adminship\\n/// functionality will be implemented using AccessControlRegistry\\n/// @notice The manager address here is expected to belong to an\\n/// AccessControlRegistry user that is a multisig/DAO\\ncontract AccessControlRegistryAdminnedWithManager is\\n    AccessControlRegistryAdminned,\\n    IAccessControlRegistryAdminnedWithManager\\n{\\n    /// @notice Address of the manager that manages the related\\n    /// AccessControlRegistry roles\\n    /// @dev The mutability of the manager role can be implemented by\\n    /// designating an OwnableCallForwarder contract as the manager. The\\n    /// ownership of this contract can then be transferred, effectively\\n    /// transferring managership.\\n    address public immutable override manager;\\n\\n    /// @notice Admin role\\n    /// @dev Since `manager` is immutable, so is `adminRole`\\n    bytes32 public immutable override adminRole;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        AccessControlRegistryAdminned(\\n            _accessControlRegistry,\\n            _adminRoleDescription\\n        )\\n    {\\n        require(_manager != address(0), \\\"Manager address zero\\\");\\n        manager = _manager;\\n        adminRole = _deriveAdminRole(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xbe5df884327dd7d4e236c105b6ef52cc6db20b452f4cdbe6c50fa506ed66cace\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/AccessControlRegistryUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IAccessControlRegistry.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryUser.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will interact with\\n/// AccessControlRegistry\\ncontract AccessControlRegistryUser is IAccessControlRegistryUser {\\n    /// @notice AccessControlRegistry contract address\\n    address public immutable override accessControlRegistry;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    constructor(address _accessControlRegistry) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        accessControlRegistry = _accessControlRegistry;\\n    }\\n}\\n\",\"keccak256\":\"0x43744b38d8d71226bc8fb80942d5444a50cd1255f3bded0aee390f897d142802\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will derive\\n/// AccessControlRegistry roles\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(address manager)\\n        internal\\n        pure\\n        returns (bytes32 rootRole)\\n    {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, string memory description)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(bytes32 adminRole, bytes32 descriptionHash)\\n        internal\\n        pure\\n        returns (bytes32 role)\\n    {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x20fe9d6cce9a1e4fe0b5bd8868fabbe6ee9db7fa8154bcf6316005307d63ee04\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlRegistry is IAccessControl {\\n    event InitializedManager(bytes32 indexed rootRole, address indexed manager);\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRoleAndGrantToSender(\\n        bytes32 adminRole,\\n        string calldata description\\n    ) external returns (bytes32 role);\\n\\n    function deriveRootRole(address manager)\\n        external\\n        pure\\n        returns (bytes32 rootRole);\\n\\n    function deriveRole(bytes32 adminRole, string calldata description)\\n        external\\n        pure\\n        returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x51b6c37b03f81667920dac10d53efc75e403c11348e71311b39a25c9b1cfdf76\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryUser.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is IAccessControlRegistryUser {\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0f3ad45d6e1a4815cfaff171926ad5352d499a431b041b11adb316f4569bcce4\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryUser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccessControlRegistryUser {\\n    function accessControlRegistry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce1ceb04823a801ea173fe5140344645295768ff1b4d2ee2969c2f4b362102ca\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../utils/ExtendedMulticall.sol\\\";\\nimport \\\"../whitelist/WhitelistWithManager.sol\\\";\\nimport \\\"../protocol/AirnodeRequester.sol\\\";\\nimport \\\"./Median.sol\\\";\\nimport \\\"./interfaces/IDapiServer.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Contract that serves Beacons, Beacon sets and dAPIs based on the\\n/// Airnode protocol\\n/// @notice A Beacon is a live data feed addressed by an ID, which is derived\\n/// from an Airnode address and a template ID. This is suitable where the more\\n/// recent data point is always more favorable, e.g., in the context of an\\n/// asset price data feed. Beacons can also be seen as one-Airnode data feeds\\n/// that can be used individually or combined to build Beacon sets. dAPIs are\\n/// an abstraction layer over Beacons and Beacon sets.\\n/// @dev DapiServer is a PSP requester contract. Unlike RRP, which is\\n/// implemented as a central contract, PSP implementation is built into the\\n/// requester for optimization. Accordingly, the checks that are not required\\n/// are omitted. Some examples:\\n/// - While executing a PSP Beacon update, the condition is not verified\\n/// because Beacon updates where the condition returns `false` (i.e., the\\n/// on-chain value is already close to the actual value) are not harmful, and\\n/// are even desirable.\\n/// - PSP Beacon set update subscription IDs are not verified, as the\\n/// Airnode/relayer cannot be made to \\\"misreport a Beacon set update\\\" by\\n/// spoofing a subscription ID.\\n/// - While executing a PSP Beacon set update, even the signature is not\\n/// checked because this is a purely keeper job that does not require off-chain\\n/// data. Similar to Beacon updates, any Beacon set update is welcome.\\ncontract DapiServer is\\n    ExtendedMulticall,\\n    WhitelistWithManager,\\n    AirnodeRequester,\\n    Median,\\n    IDapiServer\\n{\\n    using ECDSA for bytes32;\\n\\n    // Airnodes serve their fulfillment data along with timestamps. This\\n    // contract casts the reported data to `int224` and the timestamp to\\n    // `uint32`, which works until year 2106.\\n    struct DataFeed {\\n        int224 value;\\n        uint32 timestamp;\\n    }\\n\\n    /// @notice dAPI name setter role description\\n    string public constant override DAPI_NAME_SETTER_ROLE_DESCRIPTION =\\n        \\\"dAPI name setter\\\";\\n\\n    /// @notice Number that represents 100%\\n    /// @dev 10^8 (and not a larger number) is chosen to avoid overflows in\\n    /// `calculateUpdateInPercentage()`. Since the reported data needs to fit\\n    /// into 224 bits, its multiplication by 10^8 is guaranteed not to\\n    /// overflow.\\n    uint256 public constant override HUNDRED_PERCENT = 1e8;\\n\\n    /// @notice dAPI name setter role\\n    bytes32 public immutable override dapiNameSetterRole;\\n\\n    /// @notice If an account is an unlimited reader\\n    mapping(address => bool) public unlimitedReaderStatus;\\n\\n    /// @notice If a sponsor has permitted an account to request RRP-based\\n    /// updates at this contract\\n    mapping(address => mapping(address => bool))\\n        public\\n        override sponsorToRrpBeaconUpdateRequesterToPermissionStatus;\\n\\n    /// @notice ID of the Beacon that the subscription is registered to update\\n    mapping(bytes32 => bytes32) public override subscriptionIdToBeaconId;\\n\\n    mapping(bytes32 => DataFeed) private dataFeeds;\\n\\n    mapping(bytes32 => bytes32) private requestIdToBeaconId;\\n\\n    mapping(bytes32 => bytes32) private subscriptionIdToHash;\\n\\n    mapping(bytes32 => bytes32) private dapiNameHashToDataFeedId;\\n\\n    /// @dev Reverts if the sender is not permitted to request an RRP-based\\n    /// update with the sponsor and is not the sponsor\\n    /// @param sponsor Sponsor address\\n    modifier onlyPermittedUpdateRequester(address sponsor) {\\n        require(\\n            sponsor == msg.sender ||\\n                sponsorToRrpBeaconUpdateRequesterToPermissionStatus[sponsor][\\n                    msg.sender\\n                ],\\n            \\\"Sender not permitted\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    /// @param _airnodeProtocol AirnodeProtocol contract address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager,\\n        address _airnodeProtocol\\n    )\\n        WhitelistWithManager(\\n            _accessControlRegistry,\\n            _adminRoleDescription,\\n            _manager\\n        )\\n        AirnodeRequester(_airnodeProtocol)\\n    {\\n        dapiNameSetterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            keccak256(abi.encodePacked(DAPI_NAME_SETTER_ROLE_DESCRIPTION))\\n        );\\n    }\\n\\n    ///                     ~~~RRP Beacon updates~~~\\n\\n    /// @notice Called by the sponsor to set the update request permission\\n    /// status of an account\\n    /// @param rrpBeaconUpdateRequester RRP-based Beacon update requester\\n    /// address\\n    /// @param status Permission status\\n    function setRrpBeaconUpdatePermissionStatus(\\n        address rrpBeaconUpdateRequester,\\n        bool status\\n    ) external override {\\n        require(\\n            rrpBeaconUpdateRequester != address(0),\\n            \\\"Update requester zero\\\"\\n        );\\n        sponsorToRrpBeaconUpdateRequesterToPermissionStatus[msg.sender][\\n            rrpBeaconUpdateRequester\\n        ] = status;\\n        emit SetRrpBeaconUpdatePermissionStatus(\\n            msg.sender,\\n            rrpBeaconUpdateRequester,\\n            status\\n        );\\n    }\\n\\n    /// @notice Creates an RRP requests for the Beacon to be updated\\n    /// @dev In addition to the sponsor sponsoring this contract (by calling\\n    /// `setRrpSponsorshipStatus()`), the sponsor must also give update request\\n    /// permission to the sender (by calling\\n    /// `setRrpBeaconUpdatePermissionStatus()`) before this method is called.\\n    /// The template must specify a single point of data of type `int256` to be\\n    /// returned and for it to be small enough to be castable to `int224`\\n    /// because this is what `fulfillRrpBeaconUpdate()` expects.\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param sponsor Sponsor address\\n    /// @return requestId Request ID\\n    function requestRrpBeaconUpdate(\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor\\n    )\\n        external\\n        override\\n        onlyPermittedUpdateRequester(sponsor)\\n        returns (bytes32 requestId)\\n    {\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequest(\\n            airnode,\\n            templateId,\\n            \\\"\\\",\\n            sponsor,\\n            this.fulfillRrpBeaconUpdate.selector\\n        );\\n        requestIdToBeaconId[requestId] = beaconId;\\n        emit RequestedRrpBeaconUpdate(\\n            beaconId,\\n            sponsor,\\n            msg.sender,\\n            requestId,\\n            airnode,\\n            templateId\\n        );\\n    }\\n\\n    /// @notice Creates an RRP requests for the Beacon to be updated by the relayer\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @return requestId Request ID\\n    function requestRrpBeaconUpdateRelayed(\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor\\n    )\\n        external\\n        override\\n        onlyPermittedUpdateRequester(sponsor)\\n        returns (bytes32 requestId)\\n    {\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequestRelayed(\\n            airnode,\\n            templateId,\\n            \\\"\\\",\\n            relayer,\\n            sponsor,\\n            this.fulfillRrpBeaconUpdate.selector\\n        );\\n        requestIdToBeaconId[requestId] = beaconId;\\n        emit RequestedRrpBeaconUpdateRelayed(\\n            beaconId,\\n            sponsor,\\n            msg.sender,\\n            requestId,\\n            airnode,\\n            relayer,\\n            templateId\\n        );\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet through\\n    /// AirnodeProtocol to fulfill the request\\n    /// @param requestId Request ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    function fulfillRrpBeaconUpdate(\\n        bytes32 requestId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) external override onlyAirnodeProtocol onlyValidTimestamp(timestamp) {\\n        bytes32 beaconId = requestIdToBeaconId[requestId];\\n        delete requestIdToBeaconId[requestId];\\n        int256 decodedData = processBeaconUpdate(beaconId, timestamp, data);\\n        emit UpdatedBeaconWithRrp(beaconId, requestId, decodedData, timestamp);\\n    }\\n\\n    ///                     ~~~PSP Beacon updates~~~\\n\\n    /// @notice Registers the Beacon update subscription\\n    /// @dev Similar to how one needs to call `requestRrpBeaconUpdate()` for\\n    /// this contract to recognize the incoming RRP fulfillment, this needs to\\n    /// be called before the subscription fulfillments.\\n    /// In addition to the subscription being registered, the sponsor must use\\n    /// `setPspSponsorshipStatus()` to give permission for its sponsor wallet\\n    /// to be used for the specific subscription.\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param conditions Conditions under which the subscription is requested\\n    /// to be fulfilled\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @return subscriptionId Subscription ID\\n    function registerBeaconUpdateSubscription(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes memory conditions,\\n        address relayer,\\n        address sponsor\\n    ) external override returns (bytes32 subscriptionId) {\\n        require(relayer != address(0), \\\"Relayer address zero\\\");\\n        require(sponsor != address(0), \\\"Sponsor address zero\\\");\\n        subscriptionId = keccak256(\\n            abi.encode(\\n                block.chainid,\\n                airnode,\\n                templateId,\\n                \\\"\\\",\\n                conditions,\\n                relayer,\\n                sponsor,\\n                address(this),\\n                this.fulfillPspBeaconUpdate.selector\\n            )\\n        );\\n        subscriptionIdToHash[subscriptionId] = keccak256(\\n            abi.encodePacked(airnode, relayer, sponsor)\\n        );\\n        subscriptionIdToBeaconId[subscriptionId] = deriveBeaconId(\\n            airnode,\\n            templateId\\n        );\\n        emit RegisteredBeaconUpdateSubscription(\\n            subscriptionId,\\n            airnode,\\n            templateId,\\n            \\\"\\\",\\n            conditions,\\n            relayer,\\n            sponsor,\\n            address(this),\\n            this.fulfillPspBeaconUpdate.selector\\n        );\\n    }\\n\\n    /// @notice Returns if the respective Beacon needs to be updated based on\\n    /// the fulfillment data and the condition parameters\\n    /// @dev Reverts if not called by a void signer with zero address because\\n    /// this method can be used to indirectly read a Beacon.\\n    /// `conditionParameters` are specified within the `conditions` field of a\\n    /// Subscription.\\n    /// @param subscriptionId Subscription ID\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @param conditionParameters Subscription condition parameters (a\\n    /// `uint256` encoded in contract ABI)\\n    /// @return If the Beacon update subscription should be fulfilled\\n    function conditionPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view override returns (bool) {\\n        require(msg.sender == address(0), \\\"Sender not zero address\\\");\\n        bytes32 beaconId = subscriptionIdToBeaconId[subscriptionId];\\n        require(beaconId != bytes32(0), \\\"Subscription not registered\\\");\\n        DataFeed storage beacon = dataFeeds[beaconId];\\n        return\\n            calculateUpdateInPercentage(\\n                beacon.value,\\n                decodeFulfillmentData(data)\\n            ) >=\\n            decodeConditionParameters(conditionParameters) ||\\n            beacon.timestamp == 0;\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\\n    /// fulfill the Beacon update subscription\\n    /// @dev There is no need to verify that `conditionPspBeaconUpdate()`\\n    /// returns `true` because any Beacon update is a good Beacon update\\n    /// @param subscriptionId Subscription ID\\n    /// @param airnode Airnode address\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (a single `int256` encoded in contract\\n    /// ABI)\\n    /// @param signature Subscription ID, timestamp, sponsor wallet address\\n    /// (and fulfillment data if the relayer is not the Airnode) signed by the\\n    /// Airnode wallet\\n    function fulfillPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external override onlyValidTimestamp(timestamp) {\\n        require(\\n            subscriptionIdToHash[subscriptionId] ==\\n                keccak256(abi.encodePacked(airnode, relayer, sponsor)),\\n            \\\"Subscription not registered\\\"\\n        );\\n        if (airnode == relayer) {\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(subscriptionId, timestamp, msg.sender)\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n        } else {\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(\\n                            subscriptionId,\\n                            timestamp,\\n                            msg.sender,\\n                            data\\n                        )\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n        }\\n        bytes32 beaconId = subscriptionIdToBeaconId[subscriptionId];\\n        // Beacon ID is guaranteed to not be zero because the subscription is\\n        // registered\\n        int256 decodedData = processBeaconUpdate(beaconId, timestamp, data);\\n        emit UpdatedBeaconWithPsp(\\n            beaconId,\\n            subscriptionId,\\n            int224(decodedData),\\n            uint32(timestamp)\\n        );\\n    }\\n\\n    ///                     ~~~Signed data Beacon updates~~~\\n\\n    /// @notice Updates a Beacon using data signed by the respective Airnode,\\n    /// without requiring a request or subscription\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Response data (an `int256` encoded in contract ABI)\\n    /// @param signature Template ID, a timestamp and the response data signed\\n    /// by the Airnode address\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external override onlyValidTimestamp(timestamp) {\\n        require(\\n            (\\n                keccak256(abi.encodePacked(templateId, timestamp, data))\\n                    .toEthSignedMessageHash()\\n            ).recover(signature) == airnode,\\n            \\\"Signature mismatch\\\"\\n        );\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        int256 decodedData = processBeaconUpdate(beaconId, timestamp, data);\\n        emit UpdatedBeaconWithSignedData(beaconId, decodedData, timestamp);\\n    }\\n\\n    ///                     ~~~PSP Beacon set updates~~~\\n\\n    /// @notice Updates the Beacon set using the current values of its Beacons\\n    /// @dev This function still works if some of the IDs in `beaconIds` belong\\n    /// to Beacon sets rather than Beacons. However, this is not the intended\\n    /// use.\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function updateBeaconSetWithBeacons(bytes32[] memory beaconIds)\\n        public\\n        override\\n        returns (bytes32 beaconSetId)\\n    {\\n        uint256 beaconCount = beaconIds.length;\\n        require(beaconCount > 1, \\\"Specified less than two Beacons\\\");\\n        int256[] memory values = new int256[](beaconCount);\\n        uint256 accumulatedTimestamp = 0;\\n        for (uint256 ind = 0; ind < beaconCount; ind++) {\\n            DataFeed storage dataFeed = dataFeeds[beaconIds[ind]];\\n            values[ind] = dataFeed.value;\\n            accumulatedTimestamp += dataFeed.timestamp;\\n        }\\n        uint32 updatedTimestamp = uint32(accumulatedTimestamp / beaconCount);\\n        beaconSetId = deriveBeaconSetId(beaconIds);\\n        require(\\n            updatedTimestamp >= dataFeeds[beaconSetId].timestamp,\\n            \\\"Updated value outdated\\\"\\n        );\\n        int224 updatedValue = int224(median(values));\\n        dataFeeds[beaconSetId] = DataFeed({\\n            value: updatedValue,\\n            timestamp: updatedTimestamp\\n        });\\n        emit UpdatedBeaconSetWithBeacons(\\n            beaconSetId,\\n            updatedValue,\\n            updatedTimestamp\\n        );\\n    }\\n\\n    /// @notice Updates the Beacon set using the current values of the Beacons\\n    /// and returns if this update was justified according to the deviation\\n    /// threshold\\n    /// @dev This method does not allow the caller to indirectly read a Beacon\\n    /// set, which is why it does not require the sender to be a void signer\\n    /// with zero address. This allows the implementation of incentive\\n    /// mechanisms that rewards keepers that trigger valid dAPI updates.\\n    /// @param beaconIds Beacon IDs\\n    /// @param deviationThresholdInPercentage Deviation threshold in percentage\\n    /// where 100% is represented as `HUNDRED_PERCENT`\\n    function updateBeaconSetWithBeaconsAndReturnCondition(\\n        bytes32[] memory beaconIds,\\n        uint256 deviationThresholdInPercentage\\n    ) public override returns (bool) {\\n        bytes32 beaconSetId = deriveBeaconSetId(beaconIds);\\n        DataFeed memory initialBeaconSet = dataFeeds[beaconSetId];\\n        updateBeaconSetWithBeacons(beaconIds);\\n        DataFeed storage updatedBeaconSet = dataFeeds[beaconSetId];\\n        return\\n            calculateUpdateInPercentage(\\n                initialBeaconSet.value,\\n                updatedBeaconSet.value\\n            ) >=\\n            deviationThresholdInPercentage ||\\n            (initialBeaconSet.timestamp == 0 && updatedBeaconSet.timestamp > 0);\\n    }\\n\\n    /// @notice Returns if the respective Beacon set needs to be updated based\\n    /// on the condition parameters\\n    /// @dev The template ID used in the respective Subscription is expected to\\n    /// be zero, which means the `parameters` field of the Subscription will be\\n    /// forwarded to this function as `data`. This field should be the Beacon\\n    /// ID array encoded in contract ABI.\\n    /// @param subscriptionId Subscription ID\\n    /// @param data Fulfillment data (array of Beacon IDs, i.e., `bytes32[]`\\n    /// encoded in contract ABI)\\n    /// @param conditionParameters Subscription condition parameters (a\\n    /// `uint256` encoded in contract ABI)\\n    /// @return If the Beacon set update subscription should be fulfilled\\n    function conditionPspBeaconSetUpdate(\\n        bytes32 subscriptionId, // solhint-disable-line no-unused-vars\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external override returns (bool) {\\n        require(msg.sender == address(0), \\\"Sender not zero address\\\");\\n        bytes32[] memory beaconIds = abi.decode(data, (bytes32[]));\\n        require(\\n            keccak256(abi.encode(beaconIds)) == keccak256(data),\\n            \\\"Data length not correct\\\"\\n        );\\n        return\\n            updateBeaconSetWithBeaconsAndReturnCondition(\\n                beaconIds,\\n                decodeConditionParameters(conditionParameters)\\n            );\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\\n    /// fulfill the Beacon set update subscription\\n    /// @dev Similar to `conditionPspBeaconSetUpdate()`, if `templateId` of the\\n    /// Subscription is zero, its `parameters` field will be forwarded to\\n    /// `data` here, which is expect to be contract ABI-encoded array of Beacon\\n    /// IDs.\\n    /// It does not make sense for this subscription to be relayed, as there is\\n    /// no external data being delivered. Nevertheless, this is allowed for the\\n    /// lack of a reason to prevent it.\\n    /// Even though the consistency of the arguments are not being checked, if\\n    /// a standard implementation of Airnode is being used, these can be\\n    /// expected to be correct. Either way, the assumption is that it does not\\n    /// matter for the purposes of a Beacon set update subscription.\\n    /// @param subscriptionId Subscription ID\\n    /// @param airnode Airnode address\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @param signature Subscription ID, timestamp, sponsor wallet address\\n    /// (and fulfillment data if the relayer is not the Airnode) signed by the\\n    /// Airnode wallet\\n    function fulfillPspBeaconSetUpdate(\\n        bytes32 subscriptionId, // solhint-disable-line no-unused-vars\\n        address airnode, // solhint-disable-line no-unused-vars\\n        address relayer, // solhint-disable-line no-unused-vars\\n        address sponsor, // solhint-disable-line no-unused-vars\\n        uint256 timestamp, // solhint-disable-line no-unused-vars\\n        bytes calldata data,\\n        bytes calldata signature // solhint-disable-line no-unused-vars\\n    ) external override {\\n        require(\\n            keccak256(data) ==\\n                updateBeaconSetWithBeacons(abi.decode(data, (bytes32[]))),\\n            \\\"Data length not correct\\\"\\n        );\\n    }\\n\\n    ///                     ~~~Signed data Beacon set updates~~~\\n\\n    /// @notice Updates a Beacon set using data signed by the respective\\n    /// Airnodes without requiring a request or subscription. The Beacons for\\n    /// which the signature is omitted will be read from the storage.\\n    /// @param airnodes Airnode addresses\\n    /// @param templateIds Template IDs\\n    /// @param timestamps Timestamps used in the signatures\\n    /// @param data Response data (an `int256` encoded in contract ABI per\\n    /// Beacon)\\n    /// @param signatures Template ID, a timestamp and the response data signed\\n    /// by the respective Airnode address per Beacon\\n    /// @return beaconSetId Beacon set ID\\n    function updateBeaconSetWithSignedData(\\n        address[] memory airnodes,\\n        bytes32[] memory templateIds,\\n        uint256[] memory timestamps,\\n        bytes[] memory data,\\n        bytes[] memory signatures\\n    ) external override returns (bytes32 beaconSetId) {\\n        uint256 beaconCount = airnodes.length;\\n        require(\\n            beaconCount == templateIds.length &&\\n                beaconCount == timestamps.length &&\\n                beaconCount == data.length &&\\n                beaconCount == signatures.length,\\n            \\\"Parameter length mismatch\\\"\\n        );\\n        require(beaconCount > 1, \\\"Specified less than two Beacons\\\");\\n        bytes32[] memory beaconIds = new bytes32[](beaconCount);\\n        int256[] memory values = new int256[](beaconCount);\\n        uint256 accumulatedTimestamp = 0;\\n        for (uint256 ind = 0; ind < beaconCount; ind++) {\\n            if (signatures[ind].length != 0) {\\n                address airnode = airnodes[ind];\\n                uint256 timestamp = timestamps[ind];\\n                require(timestampIsValid(timestamp), \\\"Timestamp not valid\\\");\\n                require(\\n                    (\\n                        keccak256(\\n                            abi.encodePacked(\\n                                templateIds[ind],\\n                                timestamp,\\n                                data[ind]\\n                            )\\n                        ).toEthSignedMessageHash()\\n                    ).recover(signatures[ind]) == airnode,\\n                    \\\"Signature mismatch\\\"\\n                );\\n                values[ind] = decodeFulfillmentData(data[ind]);\\n                // Timestamp validity is already checked, which means it will\\n                // be small enough to be typecast into `uint32`\\n                accumulatedTimestamp += timestamp;\\n                beaconIds[ind] = deriveBeaconId(airnode, templateIds[ind]);\\n            } else {\\n                bytes32 beaconId = deriveBeaconId(\\n                    airnodes[ind],\\n                    templateIds[ind]\\n                );\\n                DataFeed storage dataFeed = dataFeeds[beaconId];\\n                values[ind] = dataFeed.value;\\n                accumulatedTimestamp += dataFeed.timestamp;\\n                beaconIds[ind] = beaconId;\\n            }\\n        }\\n        beaconSetId = deriveBeaconSetId(beaconIds);\\n        uint32 updatedTimestamp = uint32(accumulatedTimestamp / beaconCount);\\n        require(\\n            updatedTimestamp >= dataFeeds[beaconSetId].timestamp,\\n            \\\"Updated value outdated\\\"\\n        );\\n        int224 updatedValue = int224(median(values));\\n        dataFeeds[beaconSetId] = DataFeed({\\n            value: updatedValue,\\n            timestamp: updatedTimestamp\\n        });\\n        emit UpdatedBeaconSetWithSignedData(\\n            beaconSetId,\\n            updatedValue,\\n            updatedTimestamp\\n        );\\n    }\\n\\n    /// @notice Called by the manager to add the unlimited reader indefinitely\\n    /// @dev Since the unlimited reader status cannot be revoked, only\\n    /// contracts that are adequately restricted should be given this status\\n    /// @param unlimitedReader Unlimited reader address\\n    function addUnlimitedReader(address unlimitedReader) external override {\\n        require(msg.sender == manager, \\\"Sender not manager\\\");\\n        unlimitedReaderStatus[unlimitedReader] = true;\\n        emit AddedUnlimitedReader(unlimitedReader);\\n    }\\n\\n    /// @notice Sets the data feed ID the dAPI name points to\\n    /// @dev While a data feed ID refers to a specific Beacon or Beacon set,\\n    /// dAPI names provide a more abstract interface for convenience. This\\n    /// means a dAPI name that was pointing to a Beacon can be pointed to a\\n    /// Beacon set, then another Beacon set, etc.\\n    /// @param dapiName Human-readable dAPI name\\n    /// @param dataFeedId Data feed ID the dAPI name will point to\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId)\\n        external\\n        override\\n    {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(\\n            msg.sender == manager ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    dapiNameSetterRole,\\n                    msg.sender\\n                ),\\n            \\\"Sender cannot set dAPI name\\\"\\n        );\\n        dapiNameHashToDataFeedId[\\n            keccak256(abi.encodePacked(dapiName))\\n        ] = dataFeedId;\\n        emit SetDapiName(dapiName, dataFeedId, msg.sender);\\n    }\\n\\n    /// @notice Returns the data feed ID the dAPI name is set to\\n    /// @param dapiName dAPI name\\n    /// @return Data feed ID\\n    function dapiNameToDataFeedId(bytes32 dapiName)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return dapiNameHashToDataFeedId[keccak256(abi.encodePacked(dapiName))];\\n    }\\n\\n    /// @notice Reads the data feed with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        require(\\n            readerCanReadDataFeed(dataFeedId, msg.sender),\\n            \\\"Sender cannot read\\\"\\n        );\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        return (dataFeed.value, dataFeed.timestamp);\\n    }\\n\\n    /// @notice Reads the data feed value with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    function readDataFeedValueWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        override\\n        returns (int224 value)\\n    {\\n        require(\\n            readerCanReadDataFeed(dataFeedId, msg.sender),\\n            \\\"Sender cannot read\\\"\\n        );\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        require(dataFeed.timestamp != 0, \\\"Data feed does not exist\\\");\\n        return dataFeed.value;\\n    }\\n\\n    /// @notice Reads the data feed with dAPI name\\n    /// @dev The read data feed may belong to a Beacon or dAPI. The reader\\n    /// must be whitelisted for the hash of the dAPI name.\\n    /// @param dapiName dAPI name\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        bytes32 dapiNameHash = keccak256(abi.encodePacked(dapiName));\\n        require(\\n            readerCanReadDataFeed(dapiNameHash, msg.sender),\\n            \\\"Sender cannot read\\\"\\n        );\\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\\n        require(dataFeedId != bytes32(0), \\\"dAPI name not set\\\");\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        return (dataFeed.value, dataFeed.timestamp);\\n    }\\n\\n    /// @notice Reads the data feed value with dAPI name\\n    /// @param dapiName dAPI name\\n    /// @return value Data feed value\\n    function readDataFeedValueWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        override\\n        returns (int224 value)\\n    {\\n        bytes32 dapiNameHash = keccak256(abi.encodePacked(dapiName));\\n        require(\\n            readerCanReadDataFeed(dapiNameHash, msg.sender),\\n            \\\"Sender cannot read\\\"\\n        );\\n        DataFeed storage dataFeed = dataFeeds[\\n            dapiNameHashToDataFeedId[dapiNameHash]\\n        ];\\n        require(dataFeed.timestamp != 0, \\\"Data feed does not exist\\\");\\n        return dataFeed.value;\\n    }\\n\\n    /// @notice Returns if a reader can read the data feed\\n    /// @param dataFeedId Data feed ID (or dAPI name hash)\\n    /// @param reader Reader address\\n    /// @return If the reader can read the data feed\\n    function readerCanReadDataFeed(bytes32 dataFeedId, address reader)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            reader == address(0) ||\\n            userIsWhitelisted(dataFeedId, reader) ||\\n            unlimitedReaderStatus[reader];\\n    }\\n\\n    /// @notice Returns the detailed whitelist status of the reader for the\\n    /// data feed\\n    /// @param dataFeedId Data feed ID (or dAPI name hash)\\n    /// @param reader Reader address\\n    /// @return expirationTimestamp Timestamp at which the whitelisting of the\\n    /// reader will expire\\n    /// @return indefiniteWhitelistCount Number of times `reader` was\\n    /// whitelisted indefinitely for `dataFeedId`\\n    function dataFeedIdToReaderToWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader\\n    )\\n        external\\n        view\\n        override\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                dataFeedId\\n            ][reader];\\n        expirationTimestamp = whitelistStatus.expirationTimestamp;\\n        indefiniteWhitelistCount = whitelistStatus.indefiniteWhitelistCount;\\n    }\\n\\n    /// @notice Returns if an account has indefinitely whitelisted the reader\\n    /// for the data feed\\n    /// @param dataFeedId Data feed ID (or dAPI name hash)\\n    /// @param reader Reader address\\n    /// @param setter Address of the account that has potentially whitelisted\\n    /// the reader for the data feed indefinitely\\n    /// @return indefiniteWhitelistStatus If `setter` has indefinitely\\n    /// whitelisted reader for the data feed\\n    function dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader,\\n        address setter\\n    ) external view override returns (bool indefiniteWhitelistStatus) {\\n        indefiniteWhitelistStatus = serviceIdToUserToSetterToIndefiniteWhitelistStatus[\\n            dataFeedId\\n        ][reader][setter];\\n    }\\n\\n    /// @notice Derives the Beacon ID from the Airnode address and template ID\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @return beaconId Beacon ID\\n    function deriveBeaconId(address airnode, bytes32 templateId)\\n        public\\n        pure\\n        override\\n        returns (bytes32 beaconId)\\n    {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(templateId != bytes32(0), \\\"Template ID zero\\\");\\n        beaconId = keccak256(abi.encodePacked(airnode, templateId));\\n    }\\n\\n    /// @notice Derives the Beacon set ID from the Beacon IDs\\n    /// @dev Notice that `abi.encode()` is used over `abi.encodePacked()`\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function deriveBeaconSetId(bytes32[] memory beaconIds)\\n        public\\n        pure\\n        override\\n        returns (bytes32 beaconSetId)\\n    {\\n        beaconSetId = keccak256(abi.encode(beaconIds));\\n    }\\n\\n    /// @notice Called privately to process the Beacon update\\n    /// @param beaconId Beacon ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return updatedBeaconValue Updated Beacon value\\n    function processBeaconUpdate(\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) private returns (int256 updatedBeaconValue) {\\n        updatedBeaconValue = decodeFulfillmentData(data);\\n        require(\\n            timestamp > dataFeeds[beaconId].timestamp,\\n            \\\"Fulfillment older than Beacon\\\"\\n        );\\n        // Timestamp validity is already checked by `onlyValidTimestamp`, which\\n        // means it will be small enough to be typecast into `uint32`\\n        dataFeeds[beaconId] = DataFeed({\\n            value: int224(updatedBeaconValue),\\n            timestamp: uint32(timestamp)\\n        });\\n    }\\n\\n    /// @notice Called privately to decode the fulfillment data\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return decodedData Decoded fulfillment data\\n    function decodeFulfillmentData(bytes memory data)\\n        private\\n        pure\\n        returns (int224)\\n    {\\n        require(data.length == 32, \\\"Data length not correct\\\");\\n        int256 decodedData = abi.decode(data, (int256));\\n        require(\\n            decodedData >= type(int224).min && decodedData <= type(int224).max,\\n            \\\"Value typecasting error\\\"\\n        );\\n        return int224(decodedData);\\n    }\\n\\n    /// @notice Called privately to decode the condition parameters\\n    /// @param conditionParameters Condition parameters (a `uint256` encoded in\\n    /// contract ABI)\\n    /// @return deviationThresholdInPercentage Deviation threshold in\\n    /// percentage where 100% is represented as `HUNDRED_PERCENT`\\n    function decodeConditionParameters(bytes calldata conditionParameters)\\n        private\\n        pure\\n        returns (uint256 deviationThresholdInPercentage)\\n    {\\n        require(conditionParameters.length == 32, \\\"Incorrect parameter length\\\");\\n        deviationThresholdInPercentage = abi.decode(\\n            conditionParameters,\\n            (uint256)\\n        );\\n    }\\n\\n    /// @notice Called privately to calculate the update magnitude in\\n    /// percentages where 100% is represented as `HUNDRED_PERCENT`\\n    /// @dev The percentage changes will be more pronounced when the first\\n    /// value is almost zero, which may trigger updates more frequently than\\n    /// wanted. To avoid this, Beacons should be defined in a way that the\\n    /// expected values are not small numbers floating around zero, i.e.,\\n    /// offset and scale.\\n    /// @param initialValue Initial value\\n    /// @param updatedValue Updated value\\n    /// @return updateInPercentage Update in percentage\\n    function calculateUpdateInPercentage(\\n        int224 initialValue,\\n        int224 updatedValue\\n    ) private pure returns (uint256 updateInPercentage) {\\n        int256 delta = int256(updatedValue) - int256(initialValue);\\n        uint256 absoluteDelta = delta > 0 ? uint256(delta) : uint256(-delta);\\n        uint256 absoluteInitialValue = initialValue > 0\\n            ? uint256(int256(initialValue))\\n            : uint256(-int256(initialValue));\\n        // Avoid division by 0\\n        if (absoluteInitialValue == 0) {\\n            absoluteInitialValue = 1;\\n        }\\n        updateInPercentage =\\n            (absoluteDelta * HUNDRED_PERCENT) /\\n            absoluteInitialValue;\\n    }\\n}\\n\",\"keccak256\":\"0xaa9491055cb2d3dd41a011756cab406aed4db7e459b92ee61f2580ceeca8fa79\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/Median.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Sort.sol\\\";\\nimport \\\"./QuickSelect.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will calculate the median\\n/// of an array\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Median is Sort, Quickselect {\\n    /// @notice Returns the median of the array\\n    /// @dev Uses an unrolled sorting implementation for shorter arrays and\\n    /// quickselect for longer arrays for gas cost efficiency\\n    /// @param array Array whose median is to be calculated\\n    /// @return Median of the array\\n    function median(int256[] memory array) internal pure returns (int256) {\\n        uint256 arrayLength = array.length;\\n        if (arrayLength <= MAX_SORT_LENGTH) {\\n            sort(array);\\n            if (arrayLength % 2 == 1) {\\n                return array[arrayLength / 2];\\n            } else {\\n                return\\n                    (array[arrayLength / 2 - 1] + array[arrayLength / 2]) / 2;\\n            }\\n        } else {\\n            if (arrayLength % 2 == 1) {\\n                return array[quickselectK(array, arrayLength / 2)];\\n            } else {\\n                (uint256 mid1, uint256 mid2) = quickselectKPlusOne(\\n                    array,\\n                    arrayLength / 2 - 1\\n                );\\n                return (array[mid1] + array[mid2]) / 2;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x64b3ceea27da55a6cb86d046a69637a366e059352e70e7b98a1d55b754a05fca\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/QuickSelect.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will calculate the index\\n/// of the k-th and optionally (k+1)-th largest elements in the array\\n/// @notice Uses quickselect, which operates in-place, i.e., the array provided\\n/// as the argument will be modified.\\ncontract Quickselect {\\n    /// @notice Returns the index of the k-th largest element in the array\\n    /// @param array Array in which k-th largest element will be searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    function quickselectK(int256[] memory array, uint256 k)\\n        internal\\n        pure\\n        returns (uint256 indK)\\n    {\\n        (indK, ) = quickselect(array, 0, array.length - 1, k, false);\\n    }\\n\\n    /// @notice Returns the index of the k-th and (k+1)-th largest elements in\\n    /// the array\\n    /// @param array Array in which k-th and (k+1)-th largest elements will be\\n    /// searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element\\n    function quickselectKPlusOne(int256[] memory array, uint256 k)\\n        internal\\n        pure\\n        returns (uint256 indK, uint256 indKPlusOne)\\n    {\\n        uint256 arrayLength = array.length;\\n        require(arrayLength > 1, \\\"Array too short to select k+1\\\");\\n        return quickselect(array, 0, arrayLength - 1, k, true);\\n    }\\n\\n    /// @notice Returns the index of the k-th largest element in the specified\\n    /// section of the (potentially unsorted) array\\n    /// @param array Array in which K will be searched for\\n    /// @param lo Starting index of the section of the array that K will be\\n    /// searched in\\n    /// @param hi Last index of the section of the array that K will be\\n    /// searched in\\n    /// @param k K\\n    /// @param selectKPlusOne If the index of the (k+1)-th largest element is\\n    /// to be returned\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element (only set if\\n    /// `selectKPlusOne` is `true`)\\n    function quickselect(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k,\\n        bool selectKPlusOne\\n    ) private pure returns (uint256 indK, uint256 indKPlusOne) {\\n        if (lo == hi) {\\n            return (k, 0);\\n        }\\n        uint256 indPivot = partition(array, lo, hi);\\n        if (k < indPivot) {\\n            (indK, ) = quickselect(array, lo, indPivot - 1, k, false);\\n        } else if (k > indPivot) {\\n            (indK, ) = quickselect(array, indPivot + 1, hi, k, false);\\n        } else {\\n            indK = indPivot;\\n        }\\n        // Since Quickselect ends in the array being partitioned around the\\n        // k-th largest element, we can continue searching towards right for\\n        // the (k+1)-th largest element, which is useful in calculating the\\n        // median of an array with even length\\n        if (selectKPlusOne) {\\n            indKPlusOne = indK + 1;\\n            for (uint256 i = indKPlusOne + 1; i < array.length; i++) {\\n                if (array[i] < array[indKPlusOne]) {\\n                    indKPlusOne = i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Partitions the array into two around a pivot\\n    /// @param array Array that will be partitioned\\n    /// @param lo Starting index of the section of the array that will be\\n    /// partitioned\\n    /// @param hi Last index of the section of the array that will be\\n    /// partitioned\\n    /// @return pivotInd Pivot index\\n    function partition(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi\\n    ) private pure returns (uint256 pivotInd) {\\n        if (lo == hi) {\\n            return lo;\\n        }\\n        int256 pivot = array[lo];\\n        uint256 i = lo;\\n        pivotInd = hi + 1;\\n        while (true) {\\n            do {\\n                i++;\\n            } while (i < array.length && array[i] < pivot);\\n            do {\\n                pivotInd--;\\n            } while (array[pivotInd] > pivot);\\n            if (i >= pivotInd) {\\n                (array[lo], array[pivotInd]) = (array[pivotInd], array[lo]);\\n                return pivotInd;\\n            }\\n            (array[i], array[pivotInd]) = (array[pivotInd], array[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a023f40cae7973a346566ea2299d8d1bac8ce06e9e063d9ff2ba7f6be3401b3\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/Sort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will sort an array using\\n/// an unrolled implementation\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Sort {\\n    uint256 internal constant MAX_SORT_LENGTH = 9;\\n\\n    /// @notice Sorts the array\\n    /// @param array Array to be sorted\\n    function sort(int256[] memory array) internal pure {\\n        uint256 arrayLength = array.length;\\n        require(arrayLength <= MAX_SORT_LENGTH, \\\"Array too long to sort\\\");\\n        // Do a binary search\\n        if (arrayLength < 6) {\\n            // Possible lengths: 1, 2, 3, 4, 5\\n            if (arrayLength < 4) {\\n                // Possible lengths: 1, 2, 3\\n                if (arrayLength == 3) {\\n                    // Length: 3\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                } else if (arrayLength == 2) {\\n                    // Length: 2\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                }\\n                // Do nothing for Length: 1\\n            } else {\\n                // Possible lengths: 4, 5\\n                if (arrayLength == 5) {\\n                    // Length: 5\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                } else {\\n                    // Length: 4\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                }\\n            }\\n        } else {\\n            // Possible lengths: 6, 7, 8, 9\\n            if (arrayLength < 8) {\\n                // Possible lengths: 6, 7\\n                if (arrayLength == 7) {\\n                    // Length: 7\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 1, 5);\\n                    swapIfFirstIsLarger(array, 0, 4);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 6\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                }\\n            } else {\\n                // Possible lengths: 8, 9\\n                if (arrayLength == 9) {\\n                    // Length: 9\\n                    swapIfFirstIsLarger(array, 1, 8);\\n                    swapIfFirstIsLarger(array, 2, 7);\\n                    swapIfFirstIsLarger(array, 3, 6);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 4);\\n                    swapIfFirstIsLarger(array, 5, 8);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 5, 7);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 8\\n                    swapIfFirstIsLarger(array, 0, 7);\\n                    swapIfFirstIsLarger(array, 1, 6);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 7);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Swaps two elements of an array if the first element is greater\\n    /// than the second\\n    /// @param array Array whose elements are to be swapped\\n    /// @param ind1 Index of the first element\\n    /// @param ind2 Index of the second element\\n    function swapIfFirstIsLarger(\\n        int256[] memory array,\\n        uint256 ind1,\\n        uint256 ind2\\n    ) private pure {\\n        if (array[ind1] > array[ind2]) {\\n            (array[ind1], array[ind2]) = (array[ind2], array[ind1]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81e3790f7964b0169e60022f00f988a136e37a043053d8b07c794cc1c9b6c510\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../protocol/interfaces/IAirnodeRequester.sol\\\";\\n\\ninterface IDapiServer is IAirnodeRequester {\\n    event SetRrpBeaconUpdatePermissionStatus(\\n        address indexed sponsor,\\n        address indexed rrpBeaconUpdateRequester,\\n        bool status\\n    );\\n\\n    event RequestedRrpBeaconUpdate(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        address airnode,\\n        bytes32 templateId\\n    );\\n\\n    event RequestedRrpBeaconUpdateRelayed(\\n        bytes32 indexed beaconId,\\n        address indexed sponsor,\\n        address indexed requester,\\n        bytes32 requestId,\\n        address airnode,\\n        address relayer,\\n        bytes32 templateId\\n    );\\n\\n    event UpdatedBeaconWithRrp(\\n        bytes32 indexed beaconId,\\n        bytes32 requestId,\\n        int256 value,\\n        uint256 timestamp\\n    );\\n\\n    event RegisteredBeaconUpdateSubscription(\\n        bytes32 indexed subscriptionId,\\n        address airnode,\\n        bytes32 templateId,\\n        bytes parameters,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event UpdatedBeaconWithPsp(\\n        bytes32 indexed beaconId,\\n        bytes32 subscriptionId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int256 value,\\n        uint256 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithSignedData(\\n        bytes32 indexed dapiId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event AddedUnlimitedReader(address indexed unlimitedReader);\\n\\n    event SetDapiName(\\n        bytes32 indexed dapiName,\\n        bytes32 dataFeedId,\\n        address indexed sender\\n    );\\n\\n    function setRrpBeaconUpdatePermissionStatus(\\n        address rrpBeaconUpdateRequester,\\n        bool status\\n    ) external;\\n\\n    function requestRrpBeaconUpdate(\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function requestRrpBeaconUpdateRelayed(\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRrpBeaconUpdate(\\n        bytes32 requestId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) external;\\n\\n    function registerBeaconUpdateSubscription(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes memory conditions,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 subscriptionId);\\n\\n    function conditionPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view returns (bool);\\n\\n    function fulfillPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithBeacons(bytes32[] memory beaconIds)\\n        external\\n        returns (bytes32 beaconSetId);\\n\\n    function updateBeaconSetWithBeaconsAndReturnCondition(\\n        bytes32[] memory beaconIds,\\n        uint256 updateThresholdInPercentage\\n    ) external returns (bool);\\n\\n    function conditionPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external returns (bool);\\n\\n    function fulfillPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithSignedData(\\n        address[] memory airnodes,\\n        bytes32[] memory templateIds,\\n        uint256[] memory timestamps,\\n        bytes[] memory data,\\n        bytes[] memory signatures\\n    ) external returns (bytes32 beaconSetId);\\n\\n    function addUnlimitedReader(address unlimitedReader) external;\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(bytes32 dapiName)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function readDataFeedWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedValueWithId(bytes32 dataFeedId)\\n        external\\n        view\\n        returns (int224 value);\\n\\n    function readDataFeedWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedValueWithDapiName(bytes32 dapiName)\\n        external\\n        view\\n        returns (int224 value);\\n\\n    function readerCanReadDataFeed(bytes32 dataFeedId, address reader)\\n        external\\n        view\\n        returns (bool);\\n\\n    function dataFeedIdToReaderToWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader\\n    )\\n        external\\n        view\\n        returns (uint64 expirationTimestamp, uint192 indefiniteWhitelistCount);\\n\\n    function dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(\\n        bytes32 dataFeedId,\\n        address reader,\\n        address setter\\n    ) external view returns (bool indefiniteWhitelistStatus);\\n\\n    function deriveBeaconId(address airnode, bytes32 templateId)\\n        external\\n        pure\\n        returns (bytes32 beaconId);\\n\\n    function deriveBeaconSetId(bytes32[] memory beaconIds)\\n        external\\n        pure\\n        returns (bytes32 beaconSetId);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function HUNDRED_PERCENT() external view returns (uint256);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function sponsorToRrpBeaconUpdateRequesterToPermissionStatus(\\n        address sponsor,\\n        address updateRequester\\n    ) external view returns (bool);\\n\\n    function subscriptionIdToBeaconId(bytes32 subscriptionId)\\n        external\\n        view\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6a09876c58ae7ba79531eb8276d6b9501add508c73b86a18b1bf641da194391f\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/AirnodeRequester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IAirnodeProtocol.sol\\\";\\nimport \\\"./interfaces/IAirnodeRequester.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will make Airnode\\n/// requests and receive fulfillments\\ncontract AirnodeRequester is IAirnodeRequester {\\n    /// @notice AirnodeProtocol contract address\\n    address public immutable override airnodeProtocol;\\n\\n    /// @dev Reverts if the sender is not the AirnodeProtocol contract. Use\\n    /// this modifier with methods that are meant to receive RRP fulfillments.\\n    modifier onlyAirnodeProtocol() {\\n        require(\\n            msg.sender == address(airnodeProtocol),\\n            \\\"Sender not Airnode protocol\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the timestamp is not valid. Use this modifier with\\n    /// methods that are meant to receive RRP and PSP fulfillments.\\n    /// @param timestamp Timestamp used in the signature\\n    modifier onlyValidTimestamp(uint256 timestamp) {\\n        require(timestampIsValid(timestamp), \\\"Timestamp not valid\\\");\\n        _;\\n    }\\n\\n    /// @param _airnodeProtocol AirnodeProtocol contract address\\n    constructor(address _airnodeProtocol) {\\n        require(_airnodeProtocol != address(0), \\\"AirnodeProtocol address zero\\\");\\n        airnodeProtocol = _airnodeProtocol;\\n    }\\n\\n    /// @notice Returns if the timestamp used in the signature is valid\\n    /// @dev Returns `false` if the timestamp is not at most 1 hour old to\\n    /// prevent replays. Returns `false` if the timestamp is not from the past,\\n    /// with some leeway to accomodate for some benign time drift. These values\\n    /// are appropriate in most cases, but you can adjust them if you are aware\\n    /// of the implications.\\n    /// @param timestamp Timestamp used in the signature\\n    function timestampIsValid(uint256 timestamp) internal view returns (bool) {\\n        return\\n            timestamp + 1 hours > block.timestamp &&\\n            timestamp < block.timestamp + 15 minutes;\\n    }\\n}\\n\",\"keccak256\":\"0x05b58f73dd6950ab243b58f2e2c7ce85515153582dfaa8b4a84e8bb178596584\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/IAirnodeProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStorageUtils.sol\\\";\\nimport \\\"./ISponsorshipUtils.sol\\\";\\nimport \\\"./IWithdrawalUtils.sol\\\";\\n\\ninterface IAirnodeProtocol is\\n    IStorageUtils,\\n    ISponsorshipUtils,\\n    IWithdrawalUtils\\n{\\n    event MadeRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        address requester,\\n        uint256 requesterRequestCount,\\n        bytes32 templateId,\\n        bytes parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event FulfilledRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event FailedRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        uint256 timestamp,\\n        string errorMessage\\n    );\\n\\n    event MadeRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        address requester,\\n        uint256 requesterRequestCount,\\n        bytes32 templateId,\\n        bytes parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event FulfilledRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event FailedRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        uint256 timestamp,\\n        string errorMessage\\n    );\\n\\n    function makeRequest(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes calldata parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bool callSuccess, bytes memory callData);\\n\\n    function failRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external;\\n\\n    function makeRequestRelayed(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes calldata parameters,\\n        address relayer,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bool callSuccess, bytes memory callData);\\n\\n    function failRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external;\\n\\n    function requestIsAwaitingFulfillment(bytes32 requestId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function requesterToRequestCount(address requester)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1505ceb2caf137e9b61bcff0dd1f6d8affac86f5cce16fd96270d11fdc401a9\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/IAirnodeRequester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAirnodeRequester {\\n    function airnodeProtocol() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2412446bb860cfaafa447d99d0f41ba6977e7f2b6b743a09c16b1ff58186309\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/ISponsorshipUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISponsorshipUtils {\\n    event SetRrpSponsorshipStatus(\\n        address indexed sponsor,\\n        address indexed requester,\\n        bool status\\n    );\\n\\n    event SetPspSponsorshipStatus(\\n        address indexed sponsor,\\n        bytes32 indexed subscriptionId,\\n        bool status\\n    );\\n\\n    function setRrpSponsorshipStatus(address requester, bool status) external;\\n\\n    function setPspSponsorshipStatus(bytes32 subscriptionId, bool status)\\n        external;\\n\\n    function sponsorToRequesterToRrpSponsorshipStatus(\\n        address sponsor,\\n        address requester\\n    ) external view returns (bool status);\\n\\n    function sponsorToSubscriptionIdToPspSponsorshipStatus(\\n        address sponsor,\\n        bytes32 subscriptionId\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0x0ae23f5dd2fe2a1d17cf82555f75f8a6ecbc233e9f9efcf8ed172517b77dc398\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/IStorageUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStorageUtils {\\n    event StoredTemplate(\\n        bytes32 indexed templateId,\\n        bytes32 endpointId,\\n        bytes parameters\\n    );\\n\\n    event StoredSubscription(\\n        bytes32 indexed subscriptionId,\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 templateId,\\n        bytes parameters,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    function storeTemplate(bytes32 endpointId, bytes calldata parameters)\\n        external\\n        returns (bytes32 templateId);\\n\\n    function storeSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 templateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 subscriptionId);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MAXIMUM_PARAMETER_LENGTH() external view returns (uint256);\\n\\n    function templates(bytes32 templateId)\\n        external\\n        view\\n        returns (bytes32 endpointId, bytes memory parameters);\\n\\n    function subscriptions(bytes32 subscriptionId)\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address airnode,\\n            bytes32 templateId,\\n            bytes memory parameters,\\n            bytes memory conditions,\\n            address relayer,\\n            address sponsor,\\n            address requester,\\n            bytes4 fulfillFunctionId\\n        );\\n}\\n\",\"keccak256\":\"0xc10e4c0b509f54c9dcc463c7b8fcd778eacc6cb3f6bde28b080f68c831265f2c\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/protocol/interfaces/IWithdrawalUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWithdrawalUtils {\\n    event RequestedWithdrawal(\\n        address indexed airnodeOrRelayer,\\n        address indexed sponsor,\\n        bytes32 indexed withdrawalRequestId,\\n        uint256 protocolId\\n    );\\n\\n    event FulfilledWithdrawal(\\n        address indexed airnodeOrRelayer,\\n        address indexed sponsor,\\n        bytes32 indexed withdrawalRequestId,\\n        uint256 protocolId,\\n        address sponsorWallet,\\n        uint256 amount\\n    );\\n\\n    event ClaimedBalance(address indexed sponsor, uint256 amount);\\n\\n    function requestWithdrawal(address airnodeOrRelayer, uint256 protocolId)\\n        external;\\n\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        address airnodeOrRelayer,\\n        uint256 protocolId,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    function claimBalance() external;\\n\\n    function withdrawalRequestIsAwaitingFulfillment(bytes32 withdrawalRequestId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function sponsorToBalance(address sponsor) external view returns (uint256);\\n\\n    function sponsorToWithdrawalRequestCount(address sponsor)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x0b899bd6740858ddc93ae16d29849044089c4dd5fa61e5f32ca8feeb59b6b115\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/utils/ExtendedMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\n/// @notice Contract that extends the functionality of Multicall to cover the\\n/// retrieval of some globally available variables\\ncontract ExtendedMulticall is Multicall {\\n    /// @notice Returns the chain ID\\n    /// @return Chain ID\\n    function getChainId() external view returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Returns the account balance\\n    /// @param account Account address\\n    /// @return Account balance\\n    function getBalance(address account) external view returns (uint256) {\\n        return account.balance;\\n    }\\n\\n    /// @notice Returns the current block number\\n    /// @return Current block number\\n    function getBlockNumber() external view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Returns the current block timestamp\\n    /// @return Current block timestamp\\n    function getBlockTimestamp() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the current block basefee\\n    /// @return Current block basefee\\n    function getBlockBasefee() external view returns (uint256) {\\n        return block.basefee;\\n    }\\n}\\n\",\"keccak256\":\"0x9bab178769bc640067e1ba274aa6d3435b2ea14c9ee2a25c0216a4a0e54aa2fa\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that need temporary and\\n/// permanent whitelists for services identified by hashes\\n/// @notice This contract implements two kinds of whitelisting:\\n///   (1) Temporary, ends when the expiration timestamp is in the past\\n///   (2) Indefinite, ends when the indefinite whitelist count is zero\\n/// Multiple senders can indefinitely whitelist/unwhitelist independently. The\\n/// user will be considered whitelisted as long as there is at least one active\\n/// indefinite whitelisting.\\n/// @dev The interface of this contract is not implemented. It should be\\n/// inherited and its functions should be exposed with a sort of an\\n/// authorization scheme.\\ncontract Whitelist {\\n    struct WhitelistStatus {\\n        uint64 expirationTimestamp;\\n        uint192 indefiniteWhitelistCount;\\n    }\\n\\n    mapping(bytes32 => mapping(address => WhitelistStatus))\\n        internal serviceIdToUserToWhitelistStatus;\\n\\n    mapping(bytes32 => mapping(address => mapping(address => bool)))\\n        internal serviceIdToUserToSetterToIndefiniteWhitelistStatus;\\n\\n    /// @notice Extends the expiration of the temporary whitelist of the user\\n    /// for the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        require(\\n            expirationTimestamp >\\n                serviceIdToUserToWhitelistStatus[serviceId][user]\\n                    .expirationTimestamp,\\n            \\\"Does not extend expiration\\\"\\n        );\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of the user for\\n    /// the service\\n    /// @dev Unlike `extendWhitelistExpiration()`, this can hasten expiration\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function _setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) internal {\\n        serviceIdToUserToWhitelistStatus[serviceId][user]\\n            .expirationTimestamp = expirationTimestamp;\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of the user for the\\n    /// service\\n    /// @dev As long as at least there is at least one account that has set the\\n    /// indefinite whitelist status of the user for the service as true, the\\n    /// user will be considered whitelisted\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param status Indefinite whitelist status\\n    function _setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) internal returns (uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            status &&\\n            !serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][\\n                user\\n            ][msg.sender]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = true;\\n            indefiniteWhitelistCount++;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        } else if (\\n            !status &&\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                msg.sender\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n        }\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted to the user for\\n    /// the service by a specific account\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function _revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) internal returns (bool revoked, uint192 indefiniteWhitelistCount) {\\n        indefiniteWhitelistCount = serviceIdToUserToWhitelistStatus[serviceId][\\n            user\\n        ].indefiniteWhitelistCount;\\n        if (\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ]\\n        ) {\\n            serviceIdToUserToSetterToIndefiniteWhitelistStatus[serviceId][user][\\n                setter\\n            ] = false;\\n            indefiniteWhitelistCount--;\\n            serviceIdToUserToWhitelistStatus[serviceId][user]\\n                .indefiniteWhitelistCount = indefiniteWhitelistCount;\\n            revoked = true;\\n        }\\n    }\\n\\n    /// @notice Returns if the user is whitelised to use the service\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @return isWhitelisted If the user is whitelisted\\n    function userIsWhitelisted(bytes32 serviceId, address user)\\n        internal\\n        view\\n        returns (bool isWhitelisted)\\n    {\\n        WhitelistStatus\\n            storage whitelistStatus = serviceIdToUserToWhitelistStatus[\\n                serviceId\\n            ][user];\\n        return\\n            whitelistStatus.indefiniteWhitelistCount > 0 ||\\n            whitelistStatus.expirationTimestamp > block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x22e3980c4144e2f57a115e51b05f1aeede12fe94fbeb538a287f02e9eff6be89\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/WhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IWhitelistRoles.sol\\\";\\n\\n/// @title Contract to be inherited by Whitelist contracts that will use\\n/// generic AccessControlRegistry roles\\ncontract WhitelistRoles is IWhitelistRoles {\\n    // There are four roles implemented in this contract:\\n    // Root\\n    // \\u2514\\u2500\\u2500 (1) Admin (can grant and revoke the roles below)\\n    //     \\u251c\\u2500\\u2500 (2) Whitelist expiration extender\\n    //     \\u251c\\u2500\\u2500 (3) Whitelist expiration setter\\n    //     \\u2514\\u2500\\u2500 (4) Indefinite whitelister\\n    // Their IDs are derived from the descriptions below. Refer to\\n    // AccessControlRegistry for more information.\\n    // To clarify, the root role of the manager is the admin of (1), while (1)\\n    // is the admin of (2), (3) and (4). So (1) is more of a \\\"contract admin\\\",\\n    // while the `adminRole` used in AccessControl and AccessControlRegistry\\n    // refers to a more general adminship relationship between roles.\\n\\n    /// @notice Whitelist expiration extender role description\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration extender\\\";\\n\\n    /// @notice Whitelist expiration setter role description\\n    string\\n        public constant\\n        override WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION =\\n        \\\"Whitelist expiration setter\\\";\\n\\n    /// @notice Indefinite whitelister role description\\n\\n    string public constant override INDEFINITE_WHITELISTER_ROLE_DESCRIPTION =\\n        \\\"Indefinite whitelister\\\";\\n\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION)\\n        );\\n\\n    bytes32\\n        internal constant WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION)\\n        );\\n\\n    bytes32 internal constant INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(abi.encodePacked(INDEFINITE_WHITELISTER_ROLE_DESCRIPTION));\\n}\\n\",\"keccak256\":\"0x2d52cc38e7cc74630a9e268b527da5f091c4916d5e2f946a0f5f3e8a1a9debc3\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/WhitelistRolesWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WhitelistRoles.sol\\\";\\nimport \\\"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./interfaces/IWhitelistRolesWithManager.sol\\\";\\nimport \\\"../access-control-registry/interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract to be inherited by Whitelist contracts that will use\\n/// roles where there is a single manager\\ncontract WhitelistRolesWithManager is\\n    WhitelistRoles,\\n    AccessControlRegistryAdminnedWithManager,\\n    IWhitelistRolesWithManager\\n{\\n    // Since there will be a single manager, we can derive the roles beforehand\\n\\n    /// @notice Whitelist expiration extender role\\n    bytes32 public immutable override whitelistExpirationExtenderRole;\\n\\n    /// @notice Whitelist expiration setter role\\n    bytes32 public immutable override whitelistExpirationSetterRole;\\n\\n    /// @notice Indefinite whitelister role\\n    bytes32 public immutable override indefiniteWhitelisterRole;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        AccessControlRegistryAdminnedWithManager(\\n            _accessControlRegistry,\\n            _adminRoleDescription,\\n            _manager\\n        )\\n    {\\n        whitelistExpirationExtenderRole = _deriveRole(\\n            adminRole,\\n            WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH\\n        );\\n        whitelistExpirationSetterRole = _deriveRole(\\n            adminRole,\\n            WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH\\n        );\\n        indefiniteWhitelisterRole = _deriveRole(\\n            adminRole,\\n            INDEFINITE_WHITELISTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @dev Returns if the account has the whitelist expiration extender role\\n    /// or is the manager\\n    /// @param account Account address\\n    /// @return If the account has the whitelist extender role or is the\\n    /// manager\\n    function hasWhitelistExpirationExtenderRoleOrIsManager(address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            manager == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                whitelistExpirationExtenderRole,\\n                account\\n            );\\n    }\\n\\n    /// @dev Returns if the account has the whitelist expriation setter role or\\n    /// is the manager\\n    /// @param account Account address\\n    /// @return If the account has the whitelist setter role or is the\\n    /// manager\\n    function hasWhitelistExpirationSetterRoleOrIsManager(address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            manager == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                whitelistExpirationSetterRole,\\n                account\\n            );\\n    }\\n\\n    /// @dev Returns if the account has the indefinite whitelister role or is the\\n    /// manager\\n    /// @param account Account address\\n    /// @return If the account has the indefinite whitelister role or is the\\n    /// manager\\n    function hasIndefiniteWhitelisterRoleOrIsManager(address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            manager == account ||\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                indefiniteWhitelisterRole,\\n                account\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2cc536c0d1f33b19f7ce2941643904a8d67d877a22795e73cb889c9dea2d2ce9\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/WhitelistWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Whitelist.sol\\\";\\nimport \\\"./WhitelistRolesWithManager.sol\\\";\\nimport \\\"./interfaces/IWhitelistWithManager.sol\\\";\\n\\n/// @title Contract to be inherited by Whitelist contracts that are controlled\\n/// by a manager\\ncontract WhitelistWithManager is\\n    Whitelist,\\n    WhitelistRolesWithManager,\\n    IWhitelistWithManager\\n{\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        WhitelistRolesWithManager(\\n            _accessControlRegistry,\\n            _adminRoleDescription,\\n            _manager\\n        )\\n    {}\\n\\n    /// @notice Extends the expiration of the temporary whitelist of `user` to\\n    /// be able to use the service with `serviceId` if the sender has the\\n    /// whitelist expiration extender role\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            hasWhitelistExpirationExtenderRoleOrIsManager(msg.sender),\\n            \\\"Cannot extend expiration\\\"\\n        );\\n        require(serviceId != bytes32(0), \\\"Service ID zero\\\");\\n        require(user != address(0), \\\"User address zero\\\");\\n        _extendWhitelistExpiration(serviceId, user, expirationTimestamp);\\n        emit ExtendedWhitelistExpiration(\\n            serviceId,\\n            user,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the expiration of the temporary whitelist of `user` to be\\n    /// able to use the service with `serviceId` if the sender has the\\n    /// whitelist expiration setter role\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param expirationTimestamp Timestamp at which the temporary whitelist\\n    /// will expire\\n    function setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) external override {\\n        require(\\n            hasWhitelistExpirationSetterRoleOrIsManager(msg.sender),\\n            \\\"Cannot set expiration\\\"\\n        );\\n        require(serviceId != bytes32(0), \\\"Service ID zero\\\");\\n        require(user != address(0), \\\"User address zero\\\");\\n        _setWhitelistExpiration(serviceId, user, expirationTimestamp);\\n        emit SetWhitelistExpiration(\\n            serviceId,\\n            user,\\n            msg.sender,\\n            expirationTimestamp\\n        );\\n    }\\n\\n    /// @notice Sets the indefinite whitelist status of `user` to be able to\\n    /// use the service with `serviceId` if the sender has the indefinite\\n    /// whitelister role\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param status Indefinite whitelist status\\n    function setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) external override {\\n        require(\\n            hasIndefiniteWhitelisterRoleOrIsManager(msg.sender),\\n            \\\"Cannot set indefinite status\\\"\\n        );\\n        require(serviceId != bytes32(0), \\\"Service ID zero\\\");\\n        require(user != address(0), \\\"User address zero\\\");\\n        uint192 indefiniteWhitelistCount = _setIndefiniteWhitelistStatus(\\n            serviceId,\\n            user,\\n            status\\n        );\\n        emit SetIndefiniteWhitelistStatus(\\n            serviceId,\\n            user,\\n            msg.sender,\\n            status,\\n            indefiniteWhitelistCount\\n        );\\n    }\\n\\n    /// @notice Revokes the indefinite whitelist status granted by a specific\\n    /// account that no longer has the indefinite whitelister role\\n    /// @param serviceId Service ID\\n    /// @param user User address\\n    /// @param setter Setter of the indefinite whitelist status\\n    function revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) external override {\\n        require(\\n            !hasIndefiniteWhitelisterRoleOrIsManager(setter),\\n            \\\"setter can set indefinite status\\\"\\n        );\\n        (\\n            bool revoked,\\n            uint192 indefiniteWhitelistCount\\n        ) = _revokeIndefiniteWhitelistStatus(serviceId, user, setter);\\n        if (revoked) {\\n            emit RevokedIndefiniteWhitelistStatus(\\n                serviceId,\\n                user,\\n                setter,\\n                msg.sender,\\n                indefiniteWhitelistCount\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44af8008ceb9af5275324c8fba2c1edf128ef8cbe962ce63188d154131b1b652\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWhitelistRoles {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x1143190e909f6aa779e99d143fdb26a91e42d269814a0d76152d31418db39fbf\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistRolesWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWhitelistRoles.sol\\\";\\nimport \\\"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\n\\ninterface IWhitelistRolesWithManager is\\n    IWhitelistRoles,\\n    IAccessControlRegistryAdminnedWithManager\\n{\\n    function whitelistExpirationExtenderRole() external view returns (bytes32);\\n\\n    function whitelistExpirationSetterRole() external view returns (bytes32);\\n\\n    function indefiniteWhitelisterRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe9c34f92e73b4231b96db8b57c86d4d1be2822b73de74a09b6f9d41b433a7310\",\"license\":\"MIT\"},\"@api3/airnode-protocol-v1/contracts/whitelist/interfaces/IWhitelistWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWhitelistRolesWithManager.sol\\\";\\n\\ninterface IWhitelistWithManager is IWhitelistRolesWithManager {\\n    event ExtendedWhitelistExpiration(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetWhitelistExpiration(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed sender,\\n        uint256 expiration\\n    );\\n\\n    event SetIndefiniteWhitelistStatus(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed sender,\\n        bool status,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    event RevokedIndefiniteWhitelistStatus(\\n        bytes32 indexed serviceId,\\n        address indexed user,\\n        address indexed setter,\\n        address sender,\\n        uint192 indefiniteWhitelistCount\\n    );\\n\\n    function extendWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setWhitelistExpiration(\\n        bytes32 serviceId,\\n        address user,\\n        uint64 expirationTimestamp\\n    ) external;\\n\\n    function setIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        bool status\\n    ) external;\\n\\n    function revokeIndefiniteWhitelistStatus(\\n        bytes32 serviceId,\\n        address user,\\n        address setter\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcb96ba49728039b8c77380d97bee678124477f77e4a23c6c34144c4148853ec3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x768ccb0d556d2edde43cf5fc16860a936ce91eca96be0cf9e807ffe875f6f516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b5060405162005d7938038062005d7983398101604081905262000035916200054d565b808484848282828282828282816001600160a01b038116620000915760405162461bcd60e51b815260206004820152601060248201526f4143522061646472657373207a65726f60801b60448201526064015b60405180910390fd5b6001600160a01b03166080528051620000ed5760405162461bcd60e51b815260206004820152601c60248201527f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000604482015260640162000088565b80516200010290600290602084019062000441565b508060405160200162000116919062000640565b60408051601f19818403018152919052805160209091012060a05250506001600160a01b0381166200018b5760405162461bcd60e51b815260206004820152601460248201527f4d616e616765722061646472657373207a65726f000000000000000000000000604482015260640162000088565b6001600160a01b03811660c052620001a3816200039b565b60e081815250505050506200021e60e0516040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e646572000000815250604051602001620001fc919062000640565b604051602081830303815290604052805190602001206200041560201b60201c565b61010081815250506200027560e0516040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e207365747465720000000000815250604051602001620001fc919062000640565b6101208181525050620002cc60e0516040518060400160405280601681526020017f496e646566696e6974652077686974656c697374657200000000000000000000815250604051602001620001fc919062000640565b6101405250505050506001600160a01b03821615159050620003315760405162461bcd60e51b815260206004820152601c60248201527f4169726e6f646550726f746f636f6c2061646472657373207a65726f00000000604482015260640162000088565b6001600160a01b03166101605260c0516200038c9062000351906200039b565b6040518060400160405280601081526020016f3220a824903730b6b29039b2ba3a32b960811b815250604051602001620001fc919062000640565b61018052506200069b92505050565b60006200040f620003e0836040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60a051604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92915050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b8280546200044f906200065e565b90600052602060002090601f016020900481019282620004735760008555620004be565b82601f106200048e57805160ff1916838001178555620004be565b82800160010185558215620004be579182015b82811115620004be578251825591602001919060010190620004a1565b50620004cc929150620004d0565b5090565b5b80821115620004cc5760008155600101620004d1565b80516001600160a01b0381168114620004ff57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620005375781810151838201526020016200051d565b8381111562000547576000848401525b50505050565b600080600080608085870312156200056457600080fd5b6200056f85620004e7565b60208601519094506001600160401b03808211156200058d57600080fd5b818701915087601f830112620005a257600080fd5b815181811115620005b757620005b762000504565b604051601f8201601f19908116603f01168101908382118183101715620005e257620005e262000504565b816040528281528a6020848701011115620005fc57600080fd5b6200060f8360208301602088016200051a565b80975050505050506200062560408601620004e7565b91506200063560608601620004e7565b905092959194509250565b60008251620006548184602087016200051a565b9190910192915050565b600181811c908216806200067357607f821691505b602082108114156200069557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051610160516101805161560062000779600039600081816105b6015261207401526000818161076a015281816116cd015281816122f00152612bb001526000818161089201526132f101526000818161065301526131b10152600081816105f601526137c1015260006103540152600081816104920152818161203e015281816129f501528181613173015281816132b30152613783015260005050600081816103c9015281816120a0015281816131e70152818161332701526137f701526156006000f3fe608060405234801561001057600080fd5b506004361061034a5760003560e01c80638e85afe0116101bd578063bcb5daec116100f9578063e18de857116100a2578063f60e45d31161007c578063f60e45d3146108da578063f8b2cb4f1461091b578063fc3c1f8b14610936578063fce90be81461094957600080fd5b8063e18de8571461088d578063e406f3b2146108b4578063e705882e146108c757600080fd5b8063d55a42dd116100d3578063d55a42dd1461082b578063d7c0b87914610867578063dc96acc81461087a57600080fd5b8063bcb5daec1461078c578063c4f95dd51461079f578063d39c8968146107b257600080fd5b80639e14caa811610166578063a6b1b9a211610140578063a6b1b9a21461070f578063ac9650d814610722578063b605bbcd14610742578063b76f3c151461076557600080fd5b80639e14caa8146106c9578063a026658f146106dc578063a5fc076f146106fc57600080fd5b806391eed0851161019757806391eed085146106755780639421240514610688578063977cae011461069b57600080fd5b80638e85afe0146106185780638fca9ab91461063b5780638fe47dd81461064e57600080fd5b80634c8f1d8d1161028c5780636db798f9116102355780637512449b1161020f5780637512449b146105b1578063776bcbd2146105d8578063796b89b9146105eb5780637c706738146105f157600080fd5b80636db798f9146105575780636ed93dd01461059357806370c927ca1461059e57600080fd5b80635bc8a5c8116102665780635bc8a5c8146104f557806365101054146105085780636bd2bdd01461051b57600080fd5b80634c8f1d8d146104b45780634dcc19fe146104c957806358c55edd146104cf57600080fd5b8063206b48f4116102f95780633408e470116102d35780633408e4701461044f5780633af1dbfd1461045557806342cbb15c14610487578063481c6a751461048d57600080fd5b8063206b48f4146104165780632ce010e3146104295780633376e7c21461043c57600080fd5b80631a0a0b3e1161032a5780631a0a0b3e146103af5780631ce9ae07146103c45780631d36cf5c1461040357600080fd5b80629f2f3c1461034f578062aae33f1461038957806304dd3cee1461039c575b600080fd5b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6103766103973660046147a4565b610985565b6103766103aa3660046147f5565b610be1565b6103c26103bd366004614861565b610cca565b005b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610380565b6103c26104113660046148f5565b610e46565b6103c2610424366004614942565b610fb1565b6103c2610437366004614942565b6112ad565b6103c261044a366004614a07565b61132c565b46610376565b610468610463366004614a3c565b611472565b60408051601b9390930b835263ffffffff909116602083015201610380565b43610376565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6104bc611574565b6040516103809190614ab1565b48610376565b6104e26104dd366004614a3c565b611602565b604051601b9190910b8152602001610380565b6103c2610503366004614ac4565b6116c2565b610376610516366004614c69565b6117f6565b6104bc6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e20736574746572000000000081525081565b6104bc6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e64657200000081525081565b6103766305f5e10081565b6104e26105ac366004614a3c565b611d3b565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6103c26105e6366004614d3b565b611e35565b42610376565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b61062b610626366004614d77565b611efe565b6040519015158152602001610380565b610376610649366004614a3c565b611fa1565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6103c2610683366004614dbc565b611fe6565b610376610696366004614dde565b6121f6565b61062b6106a9366004614e11565b600460209081526000928352604080842090915290825290205460ff1681565b6103c26106d7366004614e44565b6123e0565b6103766106ea366004614a3c565b60056020526000908152604090205481565b61046861070a366004614a3c565b61249b565b6103c261071d3660046148f5565b612511565b610735610730366004614e7b565b612643565b6040516103809190614ef0565b61062b610750366004614f52565b60036020526000908152604090205460ff1681565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b61062b61079a366004614f6d565b612738565b6103766107ad3660046147a4565b61277f565b6108036107c0366004614f6d565b6000918252602082815260408084206001600160a01b0393909316845291905290205467ffffffffffffffff811691600160401b9091046001600160c01b031690565b6040805167ffffffffffffffff90931683526001600160c01b03909116602083015201610380565b6104bc6040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525081565b61062b610875366004614f90565b6127af565b61062b610888366004614f90565b6128b4565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6103c26108c2366004614f52565b6129ea565b6103766108d536600461500a565b612aae565b61062b6108e8366004614d3b565b60009283526001602090815260408085206001600160a01b03948516865282528085209290931684525290205460ff1690565b610376610929366004614f52565b6001600160a01b03163190565b610376610944366004615057565b612cb9565b6104bc6040518060400160405280601081526020017f64415049206e616d65207365747465720000000000000000000000000000000081525081565b8051600090600181116109df5760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e730060448201526064015b60405180910390fd5b60008167ffffffffffffffff8111156109fa576109fa6146ce565b604051908082528060200260200182016040528015610a23578160200160208202803683370190505b5090506000805b83811015610abb57600060066000888481518110610a4a57610a4a6150d0565b602090810291909101810151825281019190915260400160002080548551919250601b0b90859084908110610a8157610a816150d0565b60209081029190910101528054610aa590600160e01b900463ffffffff16846150fc565b9250508080610ab390615114565b915050610a2a565b506000610ac88483615145565b9050610ad38661277f565b60008181526006602052604090205490955063ffffffff600160e01b90910481169082161015610b455760405162461bcd60e51b815260206004820152601660248201527f557064617465642076616c7565206f757464617465640000000000000000000060448201526064016109d6565b6000610b5084612e6d565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008e81526006835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925087917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a25050505050919050565b60006001600160a01b038316610c395760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016109d6565b81610c865760405162461bcd60e51b815260206004820152601060248201527f54656d706c617465204944207a65726f0000000000000000000000000000000060448201526064016109d6565b6040516bffffffffffffffffffffffff19606085901b1660208201526034810183905260540160405160208183030381529060405280519060200120905092915050565b84610cd481612fd5565b610d165760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b876001600160a01b0316610d9584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610d8f9250610d7491508c908c908c908c90602001615159565b60405160208183030381529060405280519060200120613001565b9061303c565b6001600160a01b031614610de05760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b6000610dec8989610be1565b90506000610dfc82898989613060565b60408051828152602081018b905291925083917f403078446dab7471f481ca4bffac706bd84a6dba118980d267676c096f2ba924910160405180910390a250505050505050505050565b610e4f33613165565b610e9b5760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f74207365742065787069726174696f6e000000000000000000000060448201526064016109d6565b82610eda5760405162461bcd60e51b815260206004820152600f60248201526e53657276696365204944207a65726f60881b60448201526064016109d6565b6001600160a01b038216610f245760405162461bcd60e51b8152602060048201526011602482015270557365722061646472657373207a65726f60781b60448201526064016109d6565b6000838152602081815260408083206001600160a01b03861684529091529020805467ffffffffffffffff191667ffffffffffffffff831617905560405167ffffffffffffffff8216815233906001600160a01b0384169085907fd19e89b7d547ccf349211588a9a1d29461e2ce984b1b1cdbe7150976528b86f1906020015b60405180910390a4505050565b84610fbb81612fd5565b610ffd5760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b6040516bffffffffffffffffffffffff1960608b811b821660208401528a811b8216603484015289901b166048820152605c0160408051601f19818403018152918152815160209283012060008d81526008909352912054146110a25760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f742072656769737465726564000000000060448201526064016109d6565b876001600160a01b0316896001600160a01b0316141561118b57886001600160a01b031661113b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610d8f9250610d7491508f908c903390602001928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b6001600160a01b0316146111865760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b611236565b886001600160a01b03166111eb84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610d8f9250610d7491508f908c9033908d908d9060200161517a565b6001600160a01b0316146112365760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b60008a8152600560205260408120549061125282898989613060565b604080518e8152601b83900b602082015263ffffffff8b1681830152905191925083917f2b85d71813342fd0091d4573a5f78e244c2133755e470943c33a6dbf3cf9c15d9181900360600190a2505050505050505050505050565b6112bc610397848601866147a4565b84846040516112cc9291906151b4565b6040518091039020146113215760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016109d6565b505050505050505050565b611335336132a5565b6113815760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073657420696e646566696e697465207374617475730000000060448201526064016109d6565b826113c05760405162461bcd60e51b815260206004820152600f60248201526e53657276696365204944207a65726f60881b60448201526064016109d6565b6001600160a01b03821661140a5760405162461bcd60e51b8152602060048201526011602482015270557365722061646472657373207a65726f60781b60448201526064016109d6565b6000611417848484613356565b6040805184151581526001600160c01b038316602082015291925033916001600160a01b0386169187917f2fa93828cf3f001b9a9f0a7365db04ea068b9db7bcb7a38d289f0cf8aa9ce374910160405180910390a450505050565b60008060008360405160200161148a91815260200190565b6040516020818303038152906040528051906020012090506114ac8133612738565b6114ed5760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b600081815260096020526040902054806115495760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f742073657400000000000000000000000000000060448201526064016109d6565b600090815260066020526040902054601b81900b95600160e01b90910463ffffffff16945092505050565b60028054611581906151c4565b80601f01602080910402602001604051908101604052809291908181526020018280546115ad906151c4565b80156115fa5780601f106115cf576101008083540402835291602001916115fa565b820191906000526020600020905b8154815290600101906020018083116115dd57829003601f168201915b505050505081565b600061160e8233612738565b61164f5760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b60008281526006602052604090208054600160e01b900463ffffffff166116b85760405162461bcd60e51b815260206004820152601860248201527f44617461206665656420646f6573206e6f74206578697374000000000000000060448201526064016109d6565b54601b0b92915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461173a5760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206e6f74204169726e6f64652070726f746f636f6c000000000060448201526064016109d6565b8261174481612fd5565b6117865760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b6000858152600760205260408120805490829055906117a782878787613060565b604080518981526020810183905290810188905290915082907f7c88b543c4cda65df046e87397c3152c27098419cb22a90a5e37db30ef621b269060600160405180910390a250505050505050565b84518451600091908114801561180c5750845181145b80156118185750835181145b80156118245750825181145b6118705760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d617463680000000000000060448201526064016109d6565b600181116118c05760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e730060448201526064016109d6565b60008167ffffffffffffffff8111156118db576118db6146ce565b604051908082528060200260200182016040528015611904578160200160208202803683370190505b50905060008267ffffffffffffffff811115611922576119226146ce565b60405190808252806020026020018201604052801561194b578160200160208202803683370190505b5090506000805b84811015611c105786818151811061196c5761196c6150d0565b602002602001015151600014611b555760008b8281518110611990576119906150d0565b6020026020010151905060008a83815181106119ae576119ae6150d0565b602002602001015190506119c181612fd5565b611a035760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b816001600160a01b0316611a748a8581518110611a2257611a226150d0565b6020026020010151610d8f8f8781518110611a3f57611a3f6150d0565b6020026020010151858f8981518110611a5a57611a5a6150d0565b6020026020010151604051602001610d74939291906151f9565b6001600160a01b031614611abf5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b611ae18a8481518110611ad457611ad46150d0565b602002602001015161350e565b601b0b858481518110611af657611af66150d0565b6020908102919091010152611b0b81856150fc565b9350611b30828d8581518110611b2357611b236150d0565b6020026020010151610be1565b868481518110611b4257611b426150d0565b6020026020010181815250505050611bfe565b6000611b868c8381518110611b6c57611b6c6150d0565b60200260200101518c8481518110611b2357611b236150d0565b6000818152600660205260409020805486519293509091601b9190910b90869085908110611bb657611bb66150d0565b60209081029190910101528054611bda90600160e01b900463ffffffff16856150fc565b935081868481518110611bef57611bef6150d0565b60200260200101818152505050505b80611c0881615114565b915050611952565b50611c1a8361277f565b94506000611c288583615145565b60008781526006602052604090205490915063ffffffff600160e01b90910481169082161015611c9a5760405162461bcd60e51b815260206004820152601660248201527f557064617465642076616c7565206f757464617465640000000000000000000060448201526064016109d6565b6000611ca584612e6d565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008f81526006835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925088917fb34747dc40d9c985b4857c2955fec7a8f34d88bc06da72f43319795758800407910160405180910390a250505050505095945050505050565b60008082604051602001611d5191815260200190565b604051602081830303815290604052805190602001209050611d738133612738565b611db45760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b6000818152600960209081526040808320548352600690915290208054600160e01b900463ffffffff16611e2a5760405162461bcd60e51b815260206004820152601860248201527f44617461206665656420646f6573206e6f74206578697374000000000000000060448201526064016109d6565b54601b0b9392505050565b611e3e816132a5565b15611e8b5760405162461bcd60e51b815260206004820181905260248201527f7365747465722063616e2073657420696e646566696e6974652073746174757360448201526064016109d6565b600080611e99858585613611565b915091508115611ef757604080513381526001600160c01b03831660208201526001600160a01b03808616929087169188917f29c394c1d92801cab93215bf9cd50ae38d23341be6540f27d80ee2bc8a541237910160405180910390a45b5050505050565b600080611f0a8461277f565b600081815260066020908152604091829020825180840190935254601b81900b8352600160e01b900463ffffffff1690820152909150611f4985610985565b506000828152600660205260409020815181548691611f6a91601b0b6136fc565b101580611f975750602082015163ffffffff16158015611f9757508054600160e01b900463ffffffff1615155b9695505050505050565b60006009600083604051602001611fba91815260200190565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b816120335760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f00000000000000000000000000000000000060448201526064016109d6565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806121225750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156120ea57600080fd5b505afa1580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121229190615226565b61216e5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f74207365742064415049206e616d65000000000060448201526064016109d6565b80600960008460405160200161218691815260200190565b60405160208183030381529060405280519060200120815260200190815260200160002081905550336001600160a01b0316827ff3a9aac9b6ac0f842cb5d9b3491cd5fc1b6a6778d97fd9529f587339865294f5836040516121ea91815260200190565b60405180910390a35050565b6000816001600160a01b03811633148061223357506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b61227f5760405162461bcd60e51b815260206004820152601460248201527f53656e646572206e6f74207065726d697474656400000000000000000000000060448201526064016109d6565b600061228b8686610be1565b6040517feebecf690000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905260a06044830152600060a48301528681166064830152630b7914b960e31b60848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063eebecf699060c401602060405180830381600087803b15801561233657600080fd5b505af115801561234a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236e9190615243565b60008181526007602090815260409182902084905581518381526001600160a01b038a811692820192909252918201889052919450339186169083907fc0e8c8735457dd46668d6c01832656e0803b41b1e61ba12354a24f11e114eab39060600160405180910390a450509392505050565b6001600160a01b0382166124365760405162461bcd60e51b815260206004820152601560248201527f55706461746520726571756573746572207a65726f000000000000000000000060448201526064016109d6565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917fba239f737a4075f5efb0d649e16cd7d2b1978690876b079dab642f077050b27991016121ea565b6000806124a88333612738565b6124e95760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b5050600090815260066020526040902054601b81900b91600160e01b90910463ffffffff1690565b61251a33613775565b6125665760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420657874656e642065787069726174696f6e000000000000000060448201526064016109d6565b826125a55760405162461bcd60e51b815260206004820152600f60248201526e53657276696365204944207a65726f60881b60448201526064016109d6565b6001600160a01b0382166125ef5760405162461bcd60e51b8152602060048201526011602482015270557365722061646472657373207a65726f60781b60448201526064016109d6565b6125fa838383613826565b60405167ffffffffffffffff8216815233906001600160a01b0384169085907fa9e0c89b898eb7a904617915dc5b5510d539c899810042e9248569b54b9cc2ed90602001610fa4565b60608167ffffffffffffffff81111561265e5761265e6146ce565b60405190808252806020026020018201604052801561269157816020015b606081526020019060019003908161267c5790505b50905060005b8281101561273157612701308585848181106126b5576126b56150d0565b90506020028101906126c7919061525c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138a392505050565b828281518110612713576127136150d0565b6020026020010181905250808061272990615114565b915050612697565b5092915050565b60006001600160a01b0382161580612755575061275583836138c8565b8061277857506001600160a01b03821660009081526003602052604090205460ff165b9392505050565b60008160405160200161279291906152a3565b604051602081830303815290604052805190602001209050919050565b600033156127ff5760405162461bcd60e51b815260206004820152601760248201527f53656e646572206e6f74207a65726f206164647265737300000000000000000060448201526064016109d6565b600061280d858701876147a4565b9050858560405161281f9291906151b4565b60405180910390208160405160200161283891906152a3565b604051602081830303815290604052805190602001201461289b5760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016109d6565b6128a981610626868661391b565b979650505050505050565b600033156129045760405162461bcd60e51b815260206004820152601760248201527f53656e646572206e6f74207a65726f206164647265737300000000000000000060448201526064016109d6565b600086815260056020526040902054806129605760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f742072656769737465726564000000000060448201526064016109d6565b6000818152600660205260409020612978858561391b565b8154604080516020601f8b018190048102820181019092528981526129c592601b0b916129c091908c908c908190840183828082843760009201919091525061350e92505050565b6136fc565b1015806129de57508054600160e01b900463ffffffff16155b98975050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612a625760405162461bcd60e51b815260206004820152601260248201527f53656e646572206e6f74206d616e61676572000000000000000000000000000060448201526064016109d6565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f6d71fde11d6c56eaf0154d464b51df0b26dcdac118703056ea3da805fc9e1cd79190a250565b6000816001600160a01b038116331480612aeb57506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b612b375760405162461bcd60e51b815260206004820152601460248201527f53656e646572206e6f74207065726d697474656400000000000000000000000060448201526064016109d6565b6000612b438787610be1565b6040517fa7e0c85e0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526024820189905260c06044830152600060c483015287811660648301528681166084830152630b7914b960e31b60a48301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a7e0c85e9060e401602060405180830381600087803b158015612bf657600080fd5b505af1158015612c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2e9190615243565b600081815260076020526040908190208390555190935033906001600160a01b0386169083907faeef85c84fba3ef952ca2738d951d30f5093595cb5eb9830764f5b49a39442a390612ca79088908d908c908e909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a45050949350505050565b60006001600160a01b038316612d115760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f00000000000000000000000060448201526064016109d6565b6001600160a01b038216612d675760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016109d6565b604051612d8d90469088908890889088908890309063081ad23d60e21b906020016152e7565b60408051601f1981840301815282825280516020918201206bffffffffffffffffffffffff1960608b811b82168487015288811b8216603487015287901b1660488501528251808503603c018152605c909401835283519382019390932060008481526008909252919020559050612e058686610be1565b60008281526005602052604090819020919091555181907f82b139c5e690a3a4a9c2f68133d2ab1f7724bf8a69ad3fe1cd9f5a4923cf41b290612e5c9089908990899089908990309063081ad23d60e21b90615376565b60405180910390a295945050505050565b805160009060098111612f2d57612e8383613979565b612e8e6002826153fd565b60011415612ec25782612ea2600283615145565b81518110612eb257612eb26150d0565b6020026020010151915050919050565b600283612ecf8284615145565b81518110612edf57612edf6150d0565b6020026020010151846001600285612ef79190615145565b612f019190615411565b81518110612f1157612f116150d0565b6020026020010151612f239190615428565b6127789190615467565b612f386002826153fd565b60011415612f555782612ea281612f50600285615145565b613e90565b600080612f78856001612f69600287615145565b612f739190615411565b613eae565b915091506002858281518110612f9057612f906150d0565b6020026020010151868481518110612faa57612faa6150d0565b6020026020010151612fbc9190615428565b612fc69190615467565b95945050505050565b50919050565b600042612fe483610e106150fc565b118015612ffb5750612ff8426103846150fc565b82105b92915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01612792565b600080600061304b8585613f2b565b9150915061305881613f98565b509392505050565b60006130a183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061350e92505050565b600086815260066020526040902054601b9190910b9150600160e01b900463ffffffff1684116131135760405162461bcd60e51b815260206004820152601d60248201527f46756c66696c6c6d656e74206f6c646572207468616e20426561636f6e00000060448201526064016109d6565b604080518082018252601b83900b815263ffffffff95861660208083019182526000988952600690529190962095519051909416600160e01b026001600160e01b039094169390931790935550919050565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612ffb5750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906391d14854906044015b60206040518083038186803b15801561322a57600080fd5b505afa15801561323e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffb9190615226565b6000928352602083815260408085206001600160a01b039490941685529290529120805467ffffffffffffffff191667ffffffffffffffff909216919091179055565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612ffb5750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906391d1485490604401613212565b6000838152602081815260408083206001600160a01b0386168452909152902054600160401b90046001600160c01b03168180156133bf575060008481526001602090815260408083206001600160a01b0387168452825280832033845290915290205460ff16155b1561344c5760008481526001602081815260408084206001600160a01b03881685528252808420338552909152909120805460ff191690911790558061340481615495565b6000868152602081815260408083206001600160a01b03891684529091529020805467ffffffffffffffff16600160401b6001600160c01b0384160217905591506127789050565b81158015613484575060008481526001602090815260408083206001600160a01b0387168452825280832033845290915290205460ff165b156127785760008481526001602090815260408083206001600160a01b038716845282528083203384529091529020805460ff19169055806134c5816154bc565b6000868152602081815260408083206001600160a01b03891684529091529020805467ffffffffffffffff16600160401b6001600160c01b038416021790559150509392505050565b600081516020146135615760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016109d6565b6000828060200190518101906135779190615243565b90507fffffffff8000000000000000000000000000000000000000000000000000000081128015906135c557507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b612ffb5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f7200000000000000000060448201526064016109d6565b6000838152602081815260408083206001600160a01b0386811680865291845282852054888652600185528386209286529184528285209086168552909252822054600160401b9091046001600160c01b03169060ff16156136f45760008581526001602090815260408083206001600160a01b03808916855290835281842090871684529091529020805460ff19169055806136ad816154bc565b6000878152602081815260408083206001600160a01b038a1684529091529020805467ffffffffffffffff16600160401b6001600160c01b03841602179055600193509150505b935093915050565b60008083601b0b83601b0b61371191906154df565b9050600080821361372a576137258261551e565b61372c565b815b905060008086601b0b1361374c5785601b0b6137479061551e565b613751565b85601b0b5b90508061375c575060015b8061376b6305f5e1008461553b565b611f979190615145565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612ffb5750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906391d1485490604401613212565b6000838152602081815260408083206001600160a01b038616845290915290205467ffffffffffffffff908116908216116132625760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f7420657874656e642065787069726174696f6e00000000000060448201526064016109d6565b606061277883836040518060600160405280602781526020016155a460279139614156565b6000828152602081815260408083206001600160a01b038516845290915281208054600160401b90046001600160c01b0316151580613913575080544267ffffffffffffffff909116115b949350505050565b60006020821461396d5760405162461bcd60e51b815260206004820152601a60248201527f496e636f727265637420706172616d65746572206c656e67746800000000000060448201526064016109d6565b61277882840184614a3c565b805160098111156139cc5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f72740000000000000000000060448201526064016109d6565b6006811015613ada576004811015613a28578060031415613a12576139f48260006001614237565b613a018260016002614237565b613a0e8260006001614237565b5050565b8060021415613a0e57613a0e8260006001614237565b8060051415613aa657613a3e8260016002614237565b613a4b8260036004614237565b613a588260016003614237565b613a658260006002614237565b613a728260026004614237565b613a7f8260006003614237565b613a8c8260006001614237565b613a998260026003614237565b613a0e8260016002614237565b613ab38260006001614237565b613ac08260026003614237565b613acd8260016003614237565b613a998260006002614237565b6008811015613c58578060071415613bbc57613af98260016002614237565b613b068260036004614237565b613b138260056006614237565b613b208260006002614237565b613b2d8260046006614237565b613b3a8260036005614237565b613b478260026006614237565b613b548260016005614237565b613b618260006004614237565b613b6e8260026005614237565b613b7b8260006003614237565b613b888260026004614237565b613b958260016003614237565b613ba28260006001614237565b613baf8260026003614237565b613a0e8260046005614237565b613bc98260006001614237565b613bd68260026003614237565b613be38260046005614237565b613bf08260016003614237565b613bfd8260036005614237565b613c0a8260016003614237565b613c178260026004614237565b613c248260006002614237565b613c318260026004614237565b613c3e8260036004614237565b613c4b8260016002614237565b613a0e8260026003614237565b8060091415613d8c57613c6e8260016008614237565b613c7b8260026007614237565b613c888260036006614237565b613c958260046005614237565b613ca28260016004614237565b613caf8260056008614237565b613cbc8260006002614237565b613cc98260066007614237565b613cd68260026006614237565b613ce38260076008614237565b613cf08260006003614237565b613cfd8260046005614237565b613d0a8260006001614237565b613d178260036005614237565b613d248260066007614237565b613d318260026004614237565b613d3e8260016003614237565b613d4b8260056007614237565b613d588260046006614237565b613d658260016002614237565b613d728260036004614237565b613d7f8260056006614237565b613ba28260076008614237565b613d998260006007614237565b613da68260016006614237565b613db38260026005614237565b613dc08260036004614237565b613dcd8260006003614237565b613dda8260046007614237565b613de78260016002614237565b613df48260056006614237565b613e018260006001614237565b613e0e8260026003614237565b613e1b8260046005614237565b613e288260066007614237565b613e358260036005614237565b613e428260026004614237565b613e4f8260016002614237565b613e5c8260036004614237565b613e698260056006614237565b613e768260026003614237565b613e838260046005614237565b613a0e8260036004614237565b600061305883600060018651613ea69190615411565b8560006142e5565b8151600090819060018111613f055760405162461bcd60e51b815260206004820152601d60248201527f417272617920746f6f2073686f727420746f2073656c656374206b2b3100000060448201526064016109d6565b613f1e856000613f16600185615411565b8760016142e5565b92509250505b9250929050565b600080825160411415613f625760208301516040840151606085015160001a613f56878285856143e0565b94509450505050613f24565b825160401415613f8c5760208301516040840151613f818683836144cd565b935093505050613f24565b50600090506002613f24565b6000816004811115613fac57613fac61555a565b1415613fb55750565b6001816004811115613fc957613fc961555a565b14156140175760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109d6565b600281600481111561402b5761402b61555a565b14156140795760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109d6565b600381600481111561408d5761408d61555a565b14156140e65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109d6565b60048160048111156140fa576140fa61555a565b14156141535760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016109d6565b50565b6060833b6141cc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016109d6565b600080856001600160a01b0316856040516141e79190615570565b600060405180830381855af49150503d8060008114614222576040519150601f19603f3d011682016040523d82523d6000602084013e614227565b606091505b5091509150611f978282866144fc565b828181518110614249576142496150d0565b6020026020010151838381518110614263576142636150d0565b602002602001015113156142e057828181518110614283576142836150d0565b602002602001015183838151811061429d5761429d6150d0565b60200260200101518484815181106142b7576142b76150d0565b602002602001018584815181106142d0576142d06150d0565b6020908102919091010191909152525b505050565b600080848614156142fb575082905060006143d6565b6000614308888888614535565b9050808510156143325761432a8888614322600185615411565b8860006142e5565b509250614356565b808511156143525761432a886143498360016150fc565b888860006142e5565b8092505b83156143d4576143678360016150fc565b915060006143768360016150fc565b90505b88518110156143d257888381518110614394576143946150d0565b60200260200101518982815181106143ae576143ae6150d0565b602002602001015112156143c0578092505b806143ca81615114565b915050614379565b505b505b9550959350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561441757506000905060036144c4565b8460ff16601b1415801561442f57508460ff16601c14155b1561444057506000905060046144c4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614494573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166144bd576000600192509250506144c4565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016144ee878288856143e0565b935093505050935093915050565b6060831561450b575081612778565b82511561451b5782518084602001fd5b8160405162461bcd60e51b81526004016109d69190614ab1565b600081831415614546575081612778565b600084848151811061455a5761455a6150d0565b60209081029190910101519050836145738460016150fc565b92505b8061458081615114565b9150508551811080156145ab5750818682815181106145a1576145a16150d0565b6020026020010151125b614576575b826145ba8161558c565b935050818684815181106145d0576145d06150d0565b6020026020010151136145b05782811061465b578583815181106145f6576145f66150d0565b6020026020010151868681518110614610576146106150d0565b602002602001015187878151811061462a5761462a6150d0565b60200260200101888681518110614643576146436150d0565b60200260200101828152508281525050505050612778565b85838151811061466d5761466d6150d0565b6020026020010151868281518110614687576146876150d0565b60200260200101518783815181106146a1576146a16150d0565b602002602001018886815181106146ba576146ba6150d0565b602090810291909101019190915252614576565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561470d5761470d6146ce565b604052919050565b600067ffffffffffffffff82111561472f5761472f6146ce565b5060051b60200190565b600082601f83011261474a57600080fd5b8135602061475f61475a83614715565b6146e4565b82815260059290921b8401810191818101908684111561477e57600080fd5b8286015b848110156147995780358352918301918301614782565b509695505050505050565b6000602082840312156147b657600080fd5b813567ffffffffffffffff8111156147cd57600080fd5b61391384828501614739565b80356001600160a01b03811681146147f057600080fd5b919050565b6000806040838503121561480857600080fd5b614811836147d9565b946020939093013593505050565b60008083601f84011261483157600080fd5b50813567ffffffffffffffff81111561484957600080fd5b602083019150836020828501011115613f2457600080fd5b600080600080600080600060a0888a03121561487c57600080fd5b614885886147d9565b96506020880135955060408801359450606088013567ffffffffffffffff808211156148b057600080fd5b6148bc8b838c0161481f565b909650945060808a01359150808211156148d557600080fd5b506148e28a828b0161481f565b989b979a50959850939692959293505050565b60008060006060848603121561490a57600080fd5b8335925061491a602085016147d9565b9150604084013567ffffffffffffffff8116811461493757600080fd5b809150509250925092565b600080600080600080600080600060e08a8c03121561496057600080fd5b8935985061497060208b016147d9565b975061497e60408b016147d9565b965061498c60608b016147d9565b955060808a0135945060a08a013567ffffffffffffffff808211156149b057600080fd5b6149bc8d838e0161481f565b909650945060c08c01359150808211156149d557600080fd5b506149e28c828d0161481f565b915080935050809150509295985092959850929598565b801515811461415357600080fd5b600080600060608486031215614a1c57600080fd5b83359250614a2c602085016147d9565b91506040840135614937816149f9565b600060208284031215614a4e57600080fd5b5035919050565b60005b83811015614a70578181015183820152602001614a58565b83811115614a7f576000848401525b50505050565b60008151808452614a9d816020860160208601614a55565b601f01601f19169290920160200192915050565b6020815260006127786020830184614a85565b60008060008060608587031215614ada57600080fd5b8435935060208501359250604085013567ffffffffffffffff811115614aff57600080fd5b614b0b8782880161481f565b95989497509550505050565b600082601f830112614b2857600080fd5b81356020614b3861475a83614715565b82815260059290921b84018101918181019086841115614b5757600080fd5b8286015b8481101561479957614b6c816147d9565b8352918301918301614b5b565b600082601f830112614b8a57600080fd5b813567ffffffffffffffff811115614ba457614ba46146ce565b614bb7601f8201601f19166020016146e4565b818152846020838601011115614bcc57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112614bfa57600080fd5b81356020614c0a61475a83614715565b82815260059290921b84018101918181019086841115614c2957600080fd5b8286015b8481101561479957803567ffffffffffffffff811115614c4d5760008081fd5b614c5b8986838b0101614b79565b845250918301918301614c2d565b600080600080600060a08688031215614c8157600080fd5b853567ffffffffffffffff80821115614c9957600080fd5b614ca589838a01614b17565b96506020880135915080821115614cbb57600080fd5b614cc789838a01614739565b95506040880135915080821115614cdd57600080fd5b614ce989838a01614739565b94506060880135915080821115614cff57600080fd5b614d0b89838a01614be9565b93506080880135915080821115614d2157600080fd5b50614d2e88828901614be9565b9150509295509295909350565b600080600060608486031215614d5057600080fd5b83359250614d60602085016147d9565b9150614d6e604085016147d9565b90509250925092565b60008060408385031215614d8a57600080fd5b823567ffffffffffffffff811115614da157600080fd5b614dad85828601614739565b95602094909401359450505050565b60008060408385031215614dcf57600080fd5b50508035926020909101359150565b600080600060608486031215614df357600080fd5b614dfc846147d9565b925060208401359150614d6e604085016147d9565b60008060408385031215614e2457600080fd5b614e2d836147d9565b9150614e3b602084016147d9565b90509250929050565b60008060408385031215614e5757600080fd5b614e60836147d9565b91506020830135614e70816149f9565b809150509250929050565b60008060208385031215614e8e57600080fd5b823567ffffffffffffffff80821115614ea657600080fd5b818501915085601f830112614eba57600080fd5b813581811115614ec957600080fd5b8660208260051b8501011115614ede57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614f4557603f19888603018452614f33858351614a85565b94509285019290850190600101614f17565b5092979650505050505050565b600060208284031215614f6457600080fd5b612778826147d9565b60008060408385031215614f8057600080fd5b82359150614e3b602084016147d9565b600080600080600060608688031215614fa857600080fd5b85359450602086013567ffffffffffffffff80821115614fc757600080fd5b614fd389838a0161481f565b90965094506040880135915080821115614fec57600080fd5b50614ff98882890161481f565b969995985093965092949392505050565b6000806000806080858703121561502057600080fd5b615029856147d9565b93506020850135925061503e604086016147d9565b915061504c606086016147d9565b905092959194509250565b600080600080600060a0868803121561506f57600080fd5b615078866147d9565b945060208601359350604086013567ffffffffffffffff81111561509b57600080fd5b6150a788828901614b79565b9350506150b6606087016147d9565b91506150c4608087016147d9565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561510f5761510f6150e6565b500190565b6000600019821415615128576151286150e6565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826151545761515461512f565b500490565b84815283602082015281836040830137600091016040019081529392505050565b8581528460208201526bffffffffffffffffffffffff198460601b1660408201528183605483013760009101605401908152949350505050565b8183823760009101908152919050565b600181811c908216806151d857607f821691505b60208210811415612fcf57634e487b7160e01b600052602260045260246000fd5b83815282602082015260008251615217816040850160208701614a55565b91909101604001949350505050565b60006020828403121561523857600080fd5b8151612778816149f9565b60006020828403121561525557600080fd5b5051919050565b6000808335601e1984360301811261527357600080fd5b83018035915067ffffffffffffffff82111561528e57600080fd5b602001915036819003821315613f2457600080fd5b6020808252825182820181905260009190848201906040850190845b818110156152db578351835292840192918401916001016152bf565b50909695505050505050565b60006101208a83526001600160a01b03808b16602085015289604085015281606085015260008285015261014091508160808501526153288285018a614a85565b97811660a085015295861660c084015250509190921660e08201527fffffffff0000000000000000000000000000000000000000000000000000000090911661010090910152949350505050565b60006101006001600160a01b03808b16845289602085015281604085015260008285015261012091508160608501526153b18285018a614a85565b978116608085015295861660a084015250509190921660c08201527fffffffff0000000000000000000000000000000000000000000000000000000090911660e0909101529392505050565b60008261540c5761540c61512f565b500690565b600082821015615423576154236150e6565b500390565b6000808212826001600160ff1b0303841381151615615449576154496150e6565b82600160ff1b038412811615615461576154616150e6565b50500190565b6000826154765761547661512f565b600160ff1b821460001984141615615490576154906150e6565b500590565b60006001600160c01b03808316818114156154b2576154b26150e6565b6001019392505050565b60006001600160c01b038216806154d5576154d56150e6565b6000190192915050565b600080831283600160ff1b018312811516156154fd576154fd6150e6565b836001600160ff1b03018313811615615518576155186150e6565b50500390565b6000600160ff1b821415615534576155346150e6565b5060000390565b6000816000190483118215151615615555576155556150e6565b500290565b634e487b7160e01b600052602160045260246000fd5b60008251615582818460208701614a55565b9190910192915050565b60008161559b5761559b6150e6565b50600019019056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aaf5f98df755a777bf2ab38bf5b0d2b2f9740cb9c1a1c935964c5d11caec024864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061034a5760003560e01c80638e85afe0116101bd578063bcb5daec116100f9578063e18de857116100a2578063f60e45d31161007c578063f60e45d3146108da578063f8b2cb4f1461091b578063fc3c1f8b14610936578063fce90be81461094957600080fd5b8063e18de8571461088d578063e406f3b2146108b4578063e705882e146108c757600080fd5b8063d55a42dd116100d3578063d55a42dd1461082b578063d7c0b87914610867578063dc96acc81461087a57600080fd5b8063bcb5daec1461078c578063c4f95dd51461079f578063d39c8968146107b257600080fd5b80639e14caa811610166578063a6b1b9a211610140578063a6b1b9a21461070f578063ac9650d814610722578063b605bbcd14610742578063b76f3c151461076557600080fd5b80639e14caa8146106c9578063a026658f146106dc578063a5fc076f146106fc57600080fd5b806391eed0851161019757806391eed085146106755780639421240514610688578063977cae011461069b57600080fd5b80638e85afe0146106185780638fca9ab91461063b5780638fe47dd81461064e57600080fd5b80634c8f1d8d1161028c5780636db798f9116102355780637512449b1161020f5780637512449b146105b1578063776bcbd2146105d8578063796b89b9146105eb5780637c706738146105f157600080fd5b80636db798f9146105575780636ed93dd01461059357806370c927ca1461059e57600080fd5b80635bc8a5c8116102665780635bc8a5c8146104f557806365101054146105085780636bd2bdd01461051b57600080fd5b80634c8f1d8d146104b45780634dcc19fe146104c957806358c55edd146104cf57600080fd5b8063206b48f4116102f95780633408e470116102d35780633408e4701461044f5780633af1dbfd1461045557806342cbb15c14610487578063481c6a751461048d57600080fd5b8063206b48f4146104165780632ce010e3146104295780633376e7c21461043c57600080fd5b80631a0a0b3e1161032a5780631a0a0b3e146103af5780631ce9ae07146103c45780631d36cf5c1461040357600080fd5b80629f2f3c1461034f578062aae33f1461038957806304dd3cee1461039c575b600080fd5b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6103766103973660046147a4565b610985565b6103766103aa3660046147f5565b610be1565b6103c26103bd366004614861565b610cca565b005b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610380565b6103c26104113660046148f5565b610e46565b6103c2610424366004614942565b610fb1565b6103c2610437366004614942565b6112ad565b6103c261044a366004614a07565b61132c565b46610376565b610468610463366004614a3c565b611472565b60408051601b9390930b835263ffffffff909116602083015201610380565b43610376565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b6104bc611574565b6040516103809190614ab1565b48610376565b6104e26104dd366004614a3c565b611602565b604051601b9190910b8152602001610380565b6103c2610503366004614ac4565b6116c2565b610376610516366004614c69565b6117f6565b6104bc6040518060400160405280601b81526020017f57686974656c6973742065787069726174696f6e20736574746572000000000081525081565b6104bc6040518060400160405280601d81526020017f57686974656c6973742065787069726174696f6e20657874656e64657200000081525081565b6103766305f5e10081565b6104e26105ac366004614a3c565b611d3b565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6103c26105e6366004614d3b565b611e35565b42610376565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b61062b610626366004614d77565b611efe565b6040519015158152602001610380565b610376610649366004614a3c565b611fa1565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6103c2610683366004614dbc565b611fe6565b610376610696366004614dde565b6121f6565b61062b6106a9366004614e11565b600460209081526000928352604080842090915290825290205460ff1681565b6103c26106d7366004614e44565b6123e0565b6103766106ea366004614a3c565b60056020526000908152604090205481565b61046861070a366004614a3c565b61249b565b6103c261071d3660046148f5565b612511565b610735610730366004614e7b565b612643565b6040516103809190614ef0565b61062b610750366004614f52565b60036020526000908152604090205460ff1681565b6103eb7f000000000000000000000000000000000000000000000000000000000000000081565b61062b61079a366004614f6d565b612738565b6103766107ad3660046147a4565b61277f565b6108036107c0366004614f6d565b6000918252602082815260408084206001600160a01b0393909316845291905290205467ffffffffffffffff811691600160401b9091046001600160c01b031690565b6040805167ffffffffffffffff90931683526001600160c01b03909116602083015201610380565b6104bc6040518060400160405280601681526020017f496e646566696e6974652077686974656c69737465720000000000000000000081525081565b61062b610875366004614f90565b6127af565b61062b610888366004614f90565b6128b4565b6103767f000000000000000000000000000000000000000000000000000000000000000081565b6103c26108c2366004614f52565b6129ea565b6103766108d536600461500a565b612aae565b61062b6108e8366004614d3b565b60009283526001602090815260408085206001600160a01b03948516865282528085209290931684525290205460ff1690565b610376610929366004614f52565b6001600160a01b03163190565b610376610944366004615057565b612cb9565b6104bc6040518060400160405280601081526020017f64415049206e616d65207365747465720000000000000000000000000000000081525081565b8051600090600181116109df5760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e730060448201526064015b60405180910390fd5b60008167ffffffffffffffff8111156109fa576109fa6146ce565b604051908082528060200260200182016040528015610a23578160200160208202803683370190505b5090506000805b83811015610abb57600060066000888481518110610a4a57610a4a6150d0565b602090810291909101810151825281019190915260400160002080548551919250601b0b90859084908110610a8157610a816150d0565b60209081029190910101528054610aa590600160e01b900463ffffffff16846150fc565b9250508080610ab390615114565b915050610a2a565b506000610ac88483615145565b9050610ad38661277f565b60008181526006602052604090205490955063ffffffff600160e01b90910481169082161015610b455760405162461bcd60e51b815260206004820152601660248201527f557064617465642076616c7565206f757464617465640000000000000000000060448201526064016109d6565b6000610b5084612e6d565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008e81526006835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925087917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a25050505050919050565b60006001600160a01b038316610c395760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016109d6565b81610c865760405162461bcd60e51b815260206004820152601060248201527f54656d706c617465204944207a65726f0000000000000000000000000000000060448201526064016109d6565b6040516bffffffffffffffffffffffff19606085901b1660208201526034810183905260540160405160208183030381529060405280519060200120905092915050565b84610cd481612fd5565b610d165760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b876001600160a01b0316610d9584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610d8f9250610d7491508c908c908c908c90602001615159565b60405160208183030381529060405280519060200120613001565b9061303c565b6001600160a01b031614610de05760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b6000610dec8989610be1565b90506000610dfc82898989613060565b60408051828152602081018b905291925083917f403078446dab7471f481ca4bffac706bd84a6dba118980d267676c096f2ba924910160405180910390a250505050505050505050565b610e4f33613165565b610e9b5760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f74207365742065787069726174696f6e000000000000000000000060448201526064016109d6565b82610eda5760405162461bcd60e51b815260206004820152600f60248201526e53657276696365204944207a65726f60881b60448201526064016109d6565b6001600160a01b038216610f245760405162461bcd60e51b8152602060048201526011602482015270557365722061646472657373207a65726f60781b60448201526064016109d6565b6000838152602081815260408083206001600160a01b03861684529091529020805467ffffffffffffffff191667ffffffffffffffff831617905560405167ffffffffffffffff8216815233906001600160a01b0384169085907fd19e89b7d547ccf349211588a9a1d29461e2ce984b1b1cdbe7150976528b86f1906020015b60405180910390a4505050565b84610fbb81612fd5565b610ffd5760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b6040516bffffffffffffffffffffffff1960608b811b821660208401528a811b8216603484015289901b166048820152605c0160408051601f19818403018152918152815160209283012060008d81526008909352912054146110a25760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f742072656769737465726564000000000060448201526064016109d6565b876001600160a01b0316896001600160a01b0316141561118b57886001600160a01b031661113b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610d8f9250610d7491508f908c903390602001928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b6001600160a01b0316146111865760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b611236565b886001600160a01b03166111eb84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604051610d8f9250610d7491508f908c9033908d908d9060200161517a565b6001600160a01b0316146112365760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b60008a8152600560205260408120549061125282898989613060565b604080518e8152601b83900b602082015263ffffffff8b1681830152905191925083917f2b85d71813342fd0091d4573a5f78e244c2133755e470943c33a6dbf3cf9c15d9181900360600190a2505050505050505050505050565b6112bc610397848601866147a4565b84846040516112cc9291906151b4565b6040518091039020146113215760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016109d6565b505050505050505050565b611335336132a5565b6113815760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073657420696e646566696e697465207374617475730000000060448201526064016109d6565b826113c05760405162461bcd60e51b815260206004820152600f60248201526e53657276696365204944207a65726f60881b60448201526064016109d6565b6001600160a01b03821661140a5760405162461bcd60e51b8152602060048201526011602482015270557365722061646472657373207a65726f60781b60448201526064016109d6565b6000611417848484613356565b6040805184151581526001600160c01b038316602082015291925033916001600160a01b0386169187917f2fa93828cf3f001b9a9f0a7365db04ea068b9db7bcb7a38d289f0cf8aa9ce374910160405180910390a450505050565b60008060008360405160200161148a91815260200190565b6040516020818303038152906040528051906020012090506114ac8133612738565b6114ed5760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b600081815260096020526040902054806115495760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f742073657400000000000000000000000000000060448201526064016109d6565b600090815260066020526040902054601b81900b95600160e01b90910463ffffffff16945092505050565b60028054611581906151c4565b80601f01602080910402602001604051908101604052809291908181526020018280546115ad906151c4565b80156115fa5780601f106115cf576101008083540402835291602001916115fa565b820191906000526020600020905b8154815290600101906020018083116115dd57829003601f168201915b505050505081565b600061160e8233612738565b61164f5760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b60008281526006602052604090208054600160e01b900463ffffffff166116b85760405162461bcd60e51b815260206004820152601860248201527f44617461206665656420646f6573206e6f74206578697374000000000000000060448201526064016109d6565b54601b0b92915050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461173a5760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206e6f74204169726e6f64652070726f746f636f6c000000000060448201526064016109d6565b8261174481612fd5565b6117865760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b6000858152600760205260408120805490829055906117a782878787613060565b604080518981526020810183905290810188905290915082907f7c88b543c4cda65df046e87397c3152c27098419cb22a90a5e37db30ef621b269060600160405180910390a250505050505050565b84518451600091908114801561180c5750845181145b80156118185750835181145b80156118245750825181145b6118705760405162461bcd60e51b815260206004820152601960248201527f506172616d65746572206c656e677468206d69736d617463680000000000000060448201526064016109d6565b600181116118c05760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e730060448201526064016109d6565b60008167ffffffffffffffff8111156118db576118db6146ce565b604051908082528060200260200182016040528015611904578160200160208202803683370190505b50905060008267ffffffffffffffff811115611922576119226146ce565b60405190808252806020026020018201604052801561194b578160200160208202803683370190505b5090506000805b84811015611c105786818151811061196c5761196c6150d0565b602002602001015151600014611b555760008b8281518110611990576119906150d0565b6020026020010151905060008a83815181106119ae576119ae6150d0565b602002602001015190506119c181612fd5565b611a035760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b60448201526064016109d6565b816001600160a01b0316611a748a8581518110611a2257611a226150d0565b6020026020010151610d8f8f8781518110611a3f57611a3f6150d0565b6020026020010151858f8981518110611a5a57611a5a6150d0565b6020026020010151604051602001610d74939291906151f9565b6001600160a01b031614611abf5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016109d6565b611ae18a8481518110611ad457611ad46150d0565b602002602001015161350e565b601b0b858481518110611af657611af66150d0565b6020908102919091010152611b0b81856150fc565b9350611b30828d8581518110611b2357611b236150d0565b6020026020010151610be1565b868481518110611b4257611b426150d0565b6020026020010181815250505050611bfe565b6000611b868c8381518110611b6c57611b6c6150d0565b60200260200101518c8481518110611b2357611b236150d0565b6000818152600660205260409020805486519293509091601b9190910b90869085908110611bb657611bb66150d0565b60209081029190910101528054611bda90600160e01b900463ffffffff16856150fc565b935081868481518110611bef57611bef6150d0565b60200260200101818152505050505b80611c0881615114565b915050611952565b50611c1a8361277f565b94506000611c288583615145565b60008781526006602052604090205490915063ffffffff600160e01b90910481169082161015611c9a5760405162461bcd60e51b815260206004820152601660248201527f557064617465642076616c7565206f757464617465640000000000000000000060448201526064016109d6565b6000611ca584612e6d565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008f81526006835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925088917fb34747dc40d9c985b4857c2955fec7a8f34d88bc06da72f43319795758800407910160405180910390a250505050505095945050505050565b60008082604051602001611d5191815260200190565b604051602081830303815290604052805190602001209050611d738133612738565b611db45760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b6000818152600960209081526040808320548352600690915290208054600160e01b900463ffffffff16611e2a5760405162461bcd60e51b815260206004820152601860248201527f44617461206665656420646f6573206e6f74206578697374000000000000000060448201526064016109d6565b54601b0b9392505050565b611e3e816132a5565b15611e8b5760405162461bcd60e51b815260206004820181905260248201527f7365747465722063616e2073657420696e646566696e6974652073746174757360448201526064016109d6565b600080611e99858585613611565b915091508115611ef757604080513381526001600160c01b03831660208201526001600160a01b03808616929087169188917f29c394c1d92801cab93215bf9cd50ae38d23341be6540f27d80ee2bc8a541237910160405180910390a45b5050505050565b600080611f0a8461277f565b600081815260066020908152604091829020825180840190935254601b81900b8352600160e01b900463ffffffff1690820152909150611f4985610985565b506000828152600660205260409020815181548691611f6a91601b0b6136fc565b101580611f975750602082015163ffffffff16158015611f9757508054600160e01b900463ffffffff1615155b9695505050505050565b60006009600083604051602001611fba91815260200190565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b816120335760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f00000000000000000000000000000000000060448201526064016109d6565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806121225750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d148549060440160206040518083038186803b1580156120ea57600080fd5b505afa1580156120fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121229190615226565b61216e5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f74207365742064415049206e616d65000000000060448201526064016109d6565b80600960008460405160200161218691815260200190565b60405160208183030381529060405280519060200120815260200190815260200160002081905550336001600160a01b0316827ff3a9aac9b6ac0f842cb5d9b3491cd5fc1b6a6778d97fd9529f587339865294f5836040516121ea91815260200190565b60405180910390a35050565b6000816001600160a01b03811633148061223357506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b61227f5760405162461bcd60e51b815260206004820152601460248201527f53656e646572206e6f74207065726d697474656400000000000000000000000060448201526064016109d6565b600061228b8686610be1565b6040517feebecf690000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905260a06044830152600060a48301528681166064830152630b7914b960e31b60848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063eebecf699060c401602060405180830381600087803b15801561233657600080fd5b505af115801561234a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236e9190615243565b60008181526007602090815260409182902084905581518381526001600160a01b038a811692820192909252918201889052919450339186169083907fc0e8c8735457dd46668d6c01832656e0803b41b1e61ba12354a24f11e114eab39060600160405180910390a450509392505050565b6001600160a01b0382166124365760405162461bcd60e51b815260206004820152601560248201527f55706461746520726571756573746572207a65726f000000000000000000000060448201526064016109d6565b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917fba239f737a4075f5efb0d649e16cd7d2b1978690876b079dab642f077050b27991016121ea565b6000806124a88333612738565b6124e95760405162461bcd60e51b815260206004820152601260248201527114d95b99195c8818d85b9b9bdd081c99585960721b60448201526064016109d6565b5050600090815260066020526040902054601b81900b91600160e01b90910463ffffffff1690565b61251a33613775565b6125665760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420657874656e642065787069726174696f6e000000000000000060448201526064016109d6565b826125a55760405162461bcd60e51b815260206004820152600f60248201526e53657276696365204944207a65726f60881b60448201526064016109d6565b6001600160a01b0382166125ef5760405162461bcd60e51b8152602060048201526011602482015270557365722061646472657373207a65726f60781b60448201526064016109d6565b6125fa838383613826565b60405167ffffffffffffffff8216815233906001600160a01b0384169085907fa9e0c89b898eb7a904617915dc5b5510d539c899810042e9248569b54b9cc2ed90602001610fa4565b60608167ffffffffffffffff81111561265e5761265e6146ce565b60405190808252806020026020018201604052801561269157816020015b606081526020019060019003908161267c5790505b50905060005b8281101561273157612701308585848181106126b5576126b56150d0565b90506020028101906126c7919061525c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138a392505050565b828281518110612713576127136150d0565b6020026020010181905250808061272990615114565b915050612697565b5092915050565b60006001600160a01b0382161580612755575061275583836138c8565b8061277857506001600160a01b03821660009081526003602052604090205460ff165b9392505050565b60008160405160200161279291906152a3565b604051602081830303815290604052805190602001209050919050565b600033156127ff5760405162461bcd60e51b815260206004820152601760248201527f53656e646572206e6f74207a65726f206164647265737300000000000000000060448201526064016109d6565b600061280d858701876147a4565b9050858560405161281f9291906151b4565b60405180910390208160405160200161283891906152a3565b604051602081830303815290604052805190602001201461289b5760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016109d6565b6128a981610626868661391b565b979650505050505050565b600033156129045760405162461bcd60e51b815260206004820152601760248201527f53656e646572206e6f74207a65726f206164647265737300000000000000000060448201526064016109d6565b600086815260056020526040902054806129605760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f742072656769737465726564000000000060448201526064016109d6565b6000818152600660205260409020612978858561391b565b8154604080516020601f8b018190048102820181019092528981526129c592601b0b916129c091908c908c908190840183828082843760009201919091525061350e92505050565b6136fc565b1015806129de57508054600160e01b900463ffffffff16155b98975050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612a625760405162461bcd60e51b815260206004820152601260248201527f53656e646572206e6f74206d616e61676572000000000000000000000000000060448201526064016109d6565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f6d71fde11d6c56eaf0154d464b51df0b26dcdac118703056ea3da805fc9e1cd79190a250565b6000816001600160a01b038116331480612aeb57506001600160a01b038116600090815260046020908152604080832033845290915290205460ff165b612b375760405162461bcd60e51b815260206004820152601460248201527f53656e646572206e6f74207065726d697474656400000000000000000000000060448201526064016109d6565b6000612b438787610be1565b6040517fa7e0c85e0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301526024820189905260c06044830152600060c483015287811660648301528681166084830152630b7914b960e31b60a48301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a7e0c85e9060e401602060405180830381600087803b158015612bf657600080fd5b505af1158015612c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2e9190615243565b600081815260076020526040908190208390555190935033906001600160a01b0386169083907faeef85c84fba3ef952ca2738d951d30f5093595cb5eb9830764f5b49a39442a390612ca79088908d908c908e909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a45050949350505050565b60006001600160a01b038316612d115760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f00000000000000000000000060448201526064016109d6565b6001600160a01b038216612d675760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016109d6565b604051612d8d90469088908890889088908890309063081ad23d60e21b906020016152e7565b60408051601f1981840301815282825280516020918201206bffffffffffffffffffffffff1960608b811b82168487015288811b8216603487015287901b1660488501528251808503603c018152605c909401835283519382019390932060008481526008909252919020559050612e058686610be1565b60008281526005602052604090819020919091555181907f82b139c5e690a3a4a9c2f68133d2ab1f7724bf8a69ad3fe1cd9f5a4923cf41b290612e5c9089908990899089908990309063081ad23d60e21b90615376565b60405180910390a295945050505050565b805160009060098111612f2d57612e8383613979565b612e8e6002826153fd565b60011415612ec25782612ea2600283615145565b81518110612eb257612eb26150d0565b6020026020010151915050919050565b600283612ecf8284615145565b81518110612edf57612edf6150d0565b6020026020010151846001600285612ef79190615145565b612f019190615411565b81518110612f1157612f116150d0565b6020026020010151612f239190615428565b6127789190615467565b612f386002826153fd565b60011415612f555782612ea281612f50600285615145565b613e90565b600080612f78856001612f69600287615145565b612f739190615411565b613eae565b915091506002858281518110612f9057612f906150d0565b6020026020010151868481518110612faa57612faa6150d0565b6020026020010151612fbc9190615428565b612fc69190615467565b95945050505050565b50919050565b600042612fe483610e106150fc565b118015612ffb5750612ff8426103846150fc565b82105b92915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01612792565b600080600061304b8585613f2b565b9150915061305881613f98565b509392505050565b60006130a183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061350e92505050565b600086815260066020526040902054601b9190910b9150600160e01b900463ffffffff1684116131135760405162461bcd60e51b815260206004820152601d60248201527f46756c66696c6c6d656e74206f6c646572207468616e20426561636f6e00000060448201526064016109d6565b604080518082018252601b83900b815263ffffffff95861660208083019182526000988952600690529190962095519051909416600160e01b026001600160e01b039094169390931790935550919050565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612ffb5750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906391d14854906044015b60206040518083038186803b15801561322a57600080fd5b505afa15801561323e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ffb9190615226565b6000928352602083815260408085206001600160a01b039490941685529290529120805467ffffffffffffffff191667ffffffffffffffff909216919091179055565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612ffb5750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906391d1485490604401613212565b6000838152602081815260408083206001600160a01b0386168452909152902054600160401b90046001600160c01b03168180156133bf575060008481526001602090815260408083206001600160a01b0387168452825280832033845290915290205460ff16155b1561344c5760008481526001602081815260408084206001600160a01b03881685528252808420338552909152909120805460ff191690911790558061340481615495565b6000868152602081815260408083206001600160a01b03891684529091529020805467ffffffffffffffff16600160401b6001600160c01b0384160217905591506127789050565b81158015613484575060008481526001602090815260408083206001600160a01b0387168452825280832033845290915290205460ff165b156127785760008481526001602090815260408083206001600160a01b038716845282528083203384529091529020805460ff19169055806134c5816154bc565b6000868152602081815260408083206001600160a01b03891684529091529020805467ffffffffffffffff16600160401b6001600160c01b038416021790559150509392505050565b600081516020146135615760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016109d6565b6000828060200190518101906135779190615243565b90507fffffffff8000000000000000000000000000000000000000000000000000000081128015906135c557507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b612ffb5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f7200000000000000000060448201526064016109d6565b6000838152602081815260408083206001600160a01b0386811680865291845282852054888652600185528386209286529184528285209086168552909252822054600160401b9091046001600160c01b03169060ff16156136f45760008581526001602090815260408083206001600160a01b03808916855290835281842090871684529091529020805460ff19169055806136ad816154bc565b6000878152602081815260408083206001600160a01b038a1684529091529020805467ffffffffffffffff16600160401b6001600160c01b03841602179055600193509150505b935093915050565b60008083601b0b83601b0b61371191906154df565b9050600080821361372a576137258261551e565b61372c565b815b905060008086601b0b1361374c5785601b0b6137479061551e565b613751565b85601b0b5b90508061375c575060015b8061376b6305f5e1008461553b565b611f979190615145565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480612ffb5750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0383811660248301527f000000000000000000000000000000000000000000000000000000000000000016906391d1485490604401613212565b6000838152602081815260408083206001600160a01b038616845290915290205467ffffffffffffffff908116908216116132625760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f7420657874656e642065787069726174696f6e00000000000060448201526064016109d6565b606061277883836040518060600160405280602781526020016155a460279139614156565b6000828152602081815260408083206001600160a01b038516845290915281208054600160401b90046001600160c01b0316151580613913575080544267ffffffffffffffff909116115b949350505050565b60006020821461396d5760405162461bcd60e51b815260206004820152601a60248201527f496e636f727265637420706172616d65746572206c656e67746800000000000060448201526064016109d6565b61277882840184614a3c565b805160098111156139cc5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f72740000000000000000000060448201526064016109d6565b6006811015613ada576004811015613a28578060031415613a12576139f48260006001614237565b613a018260016002614237565b613a0e8260006001614237565b5050565b8060021415613a0e57613a0e8260006001614237565b8060051415613aa657613a3e8260016002614237565b613a4b8260036004614237565b613a588260016003614237565b613a658260006002614237565b613a728260026004614237565b613a7f8260006003614237565b613a8c8260006001614237565b613a998260026003614237565b613a0e8260016002614237565b613ab38260006001614237565b613ac08260026003614237565b613acd8260016003614237565b613a998260006002614237565b6008811015613c58578060071415613bbc57613af98260016002614237565b613b068260036004614237565b613b138260056006614237565b613b208260006002614237565b613b2d8260046006614237565b613b3a8260036005614237565b613b478260026006614237565b613b548260016005614237565b613b618260006004614237565b613b6e8260026005614237565b613b7b8260006003614237565b613b888260026004614237565b613b958260016003614237565b613ba28260006001614237565b613baf8260026003614237565b613a0e8260046005614237565b613bc98260006001614237565b613bd68260026003614237565b613be38260046005614237565b613bf08260016003614237565b613bfd8260036005614237565b613c0a8260016003614237565b613c178260026004614237565b613c248260006002614237565b613c318260026004614237565b613c3e8260036004614237565b613c4b8260016002614237565b613a0e8260026003614237565b8060091415613d8c57613c6e8260016008614237565b613c7b8260026007614237565b613c888260036006614237565b613c958260046005614237565b613ca28260016004614237565b613caf8260056008614237565b613cbc8260006002614237565b613cc98260066007614237565b613cd68260026006614237565b613ce38260076008614237565b613cf08260006003614237565b613cfd8260046005614237565b613d0a8260006001614237565b613d178260036005614237565b613d248260066007614237565b613d318260026004614237565b613d3e8260016003614237565b613d4b8260056007614237565b613d588260046006614237565b613d658260016002614237565b613d728260036004614237565b613d7f8260056006614237565b613ba28260076008614237565b613d998260006007614237565b613da68260016006614237565b613db38260026005614237565b613dc08260036004614237565b613dcd8260006003614237565b613dda8260046007614237565b613de78260016002614237565b613df48260056006614237565b613e018260006001614237565b613e0e8260026003614237565b613e1b8260046005614237565b613e288260066007614237565b613e358260036005614237565b613e428260026004614237565b613e4f8260016002614237565b613e5c8260036004614237565b613e698260056006614237565b613e768260026003614237565b613e838260046005614237565b613a0e8260036004614237565b600061305883600060018651613ea69190615411565b8560006142e5565b8151600090819060018111613f055760405162461bcd60e51b815260206004820152601d60248201527f417272617920746f6f2073686f727420746f2073656c656374206b2b3100000060448201526064016109d6565b613f1e856000613f16600185615411565b8760016142e5565b92509250505b9250929050565b600080825160411415613f625760208301516040840151606085015160001a613f56878285856143e0565b94509450505050613f24565b825160401415613f8c5760208301516040840151613f818683836144cd565b935093505050613f24565b50600090506002613f24565b6000816004811115613fac57613fac61555a565b1415613fb55750565b6001816004811115613fc957613fc961555a565b14156140175760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109d6565b600281600481111561402b5761402b61555a565b14156140795760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109d6565b600381600481111561408d5761408d61555a565b14156140e65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109d6565b60048160048111156140fa576140fa61555a565b14156141535760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016109d6565b50565b6060833b6141cc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016109d6565b600080856001600160a01b0316856040516141e79190615570565b600060405180830381855af49150503d8060008114614222576040519150601f19603f3d011682016040523d82523d6000602084013e614227565b606091505b5091509150611f978282866144fc565b828181518110614249576142496150d0565b6020026020010151838381518110614263576142636150d0565b602002602001015113156142e057828181518110614283576142836150d0565b602002602001015183838151811061429d5761429d6150d0565b60200260200101518484815181106142b7576142b76150d0565b602002602001018584815181106142d0576142d06150d0565b6020908102919091010191909152525b505050565b600080848614156142fb575082905060006143d6565b6000614308888888614535565b9050808510156143325761432a8888614322600185615411565b8860006142e5565b509250614356565b808511156143525761432a886143498360016150fc565b888860006142e5565b8092505b83156143d4576143678360016150fc565b915060006143768360016150fc565b90505b88518110156143d257888381518110614394576143946150d0565b60200260200101518982815181106143ae576143ae6150d0565b602002602001015112156143c0578092505b806143ca81615114565b915050614379565b505b505b9550959350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561441757506000905060036144c4565b8460ff16601b1415801561442f57508460ff16601c14155b1561444057506000905060046144c4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614494573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166144bd576000600192509250506144c4565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016144ee878288856143e0565b935093505050935093915050565b6060831561450b575081612778565b82511561451b5782518084602001fd5b8160405162461bcd60e51b81526004016109d69190614ab1565b600081831415614546575081612778565b600084848151811061455a5761455a6150d0565b60209081029190910101519050836145738460016150fc565b92505b8061458081615114565b9150508551811080156145ab5750818682815181106145a1576145a16150d0565b6020026020010151125b614576575b826145ba8161558c565b935050818684815181106145d0576145d06150d0565b6020026020010151136145b05782811061465b578583815181106145f6576145f66150d0565b6020026020010151868681518110614610576146106150d0565b602002602001015187878151811061462a5761462a6150d0565b60200260200101888681518110614643576146436150d0565b60200260200101828152508281525050505050612778565b85838151811061466d5761466d6150d0565b6020026020010151868281518110614687576146876150d0565b60200260200101518783815181106146a1576146a16150d0565b602002602001018886815181106146ba576146ba6150d0565b602090810291909101019190915252614576565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561470d5761470d6146ce565b604052919050565b600067ffffffffffffffff82111561472f5761472f6146ce565b5060051b60200190565b600082601f83011261474a57600080fd5b8135602061475f61475a83614715565b6146e4565b82815260059290921b8401810191818101908684111561477e57600080fd5b8286015b848110156147995780358352918301918301614782565b509695505050505050565b6000602082840312156147b657600080fd5b813567ffffffffffffffff8111156147cd57600080fd5b61391384828501614739565b80356001600160a01b03811681146147f057600080fd5b919050565b6000806040838503121561480857600080fd5b614811836147d9565b946020939093013593505050565b60008083601f84011261483157600080fd5b50813567ffffffffffffffff81111561484957600080fd5b602083019150836020828501011115613f2457600080fd5b600080600080600080600060a0888a03121561487c57600080fd5b614885886147d9565b96506020880135955060408801359450606088013567ffffffffffffffff808211156148b057600080fd5b6148bc8b838c0161481f565b909650945060808a01359150808211156148d557600080fd5b506148e28a828b0161481f565b989b979a50959850939692959293505050565b60008060006060848603121561490a57600080fd5b8335925061491a602085016147d9565b9150604084013567ffffffffffffffff8116811461493757600080fd5b809150509250925092565b600080600080600080600080600060e08a8c03121561496057600080fd5b8935985061497060208b016147d9565b975061497e60408b016147d9565b965061498c60608b016147d9565b955060808a0135945060a08a013567ffffffffffffffff808211156149b057600080fd5b6149bc8d838e0161481f565b909650945060c08c01359150808211156149d557600080fd5b506149e28c828d0161481f565b915080935050809150509295985092959850929598565b801515811461415357600080fd5b600080600060608486031215614a1c57600080fd5b83359250614a2c602085016147d9565b91506040840135614937816149f9565b600060208284031215614a4e57600080fd5b5035919050565b60005b83811015614a70578181015183820152602001614a58565b83811115614a7f576000848401525b50505050565b60008151808452614a9d816020860160208601614a55565b601f01601f19169290920160200192915050565b6020815260006127786020830184614a85565b60008060008060608587031215614ada57600080fd5b8435935060208501359250604085013567ffffffffffffffff811115614aff57600080fd5b614b0b8782880161481f565b95989497509550505050565b600082601f830112614b2857600080fd5b81356020614b3861475a83614715565b82815260059290921b84018101918181019086841115614b5757600080fd5b8286015b8481101561479957614b6c816147d9565b8352918301918301614b5b565b600082601f830112614b8a57600080fd5b813567ffffffffffffffff811115614ba457614ba46146ce565b614bb7601f8201601f19166020016146e4565b818152846020838601011115614bcc57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112614bfa57600080fd5b81356020614c0a61475a83614715565b82815260059290921b84018101918181019086841115614c2957600080fd5b8286015b8481101561479957803567ffffffffffffffff811115614c4d5760008081fd5b614c5b8986838b0101614b79565b845250918301918301614c2d565b600080600080600060a08688031215614c8157600080fd5b853567ffffffffffffffff80821115614c9957600080fd5b614ca589838a01614b17565b96506020880135915080821115614cbb57600080fd5b614cc789838a01614739565b95506040880135915080821115614cdd57600080fd5b614ce989838a01614739565b94506060880135915080821115614cff57600080fd5b614d0b89838a01614be9565b93506080880135915080821115614d2157600080fd5b50614d2e88828901614be9565b9150509295509295909350565b600080600060608486031215614d5057600080fd5b83359250614d60602085016147d9565b9150614d6e604085016147d9565b90509250925092565b60008060408385031215614d8a57600080fd5b823567ffffffffffffffff811115614da157600080fd5b614dad85828601614739565b95602094909401359450505050565b60008060408385031215614dcf57600080fd5b50508035926020909101359150565b600080600060608486031215614df357600080fd5b614dfc846147d9565b925060208401359150614d6e604085016147d9565b60008060408385031215614e2457600080fd5b614e2d836147d9565b9150614e3b602084016147d9565b90509250929050565b60008060408385031215614e5757600080fd5b614e60836147d9565b91506020830135614e70816149f9565b809150509250929050565b60008060208385031215614e8e57600080fd5b823567ffffffffffffffff80821115614ea657600080fd5b818501915085601f830112614eba57600080fd5b813581811115614ec957600080fd5b8660208260051b8501011115614ede57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614f4557603f19888603018452614f33858351614a85565b94509285019290850190600101614f17565b5092979650505050505050565b600060208284031215614f6457600080fd5b612778826147d9565b60008060408385031215614f8057600080fd5b82359150614e3b602084016147d9565b600080600080600060608688031215614fa857600080fd5b85359450602086013567ffffffffffffffff80821115614fc757600080fd5b614fd389838a0161481f565b90965094506040880135915080821115614fec57600080fd5b50614ff98882890161481f565b969995985093965092949392505050565b6000806000806080858703121561502057600080fd5b615029856147d9565b93506020850135925061503e604086016147d9565b915061504c606086016147d9565b905092959194509250565b600080600080600060a0868803121561506f57600080fd5b615078866147d9565b945060208601359350604086013567ffffffffffffffff81111561509b57600080fd5b6150a788828901614b79565b9350506150b6606087016147d9565b91506150c4608087016147d9565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561510f5761510f6150e6565b500190565b6000600019821415615128576151286150e6565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826151545761515461512f565b500490565b84815283602082015281836040830137600091016040019081529392505050565b8581528460208201526bffffffffffffffffffffffff198460601b1660408201528183605483013760009101605401908152949350505050565b8183823760009101908152919050565b600181811c908216806151d857607f821691505b60208210811415612fcf57634e487b7160e01b600052602260045260246000fd5b83815282602082015260008251615217816040850160208701614a55565b91909101604001949350505050565b60006020828403121561523857600080fd5b8151612778816149f9565b60006020828403121561525557600080fd5b5051919050565b6000808335601e1984360301811261527357600080fd5b83018035915067ffffffffffffffff82111561528e57600080fd5b602001915036819003821315613f2457600080fd5b6020808252825182820181905260009190848201906040850190845b818110156152db578351835292840192918401916001016152bf565b50909695505050505050565b60006101208a83526001600160a01b03808b16602085015289604085015281606085015260008285015261014091508160808501526153288285018a614a85565b97811660a085015295861660c084015250509190921660e08201527fffffffff0000000000000000000000000000000000000000000000000000000090911661010090910152949350505050565b60006101006001600160a01b03808b16845289602085015281604085015260008285015261012091508160608501526153b18285018a614a85565b978116608085015295861660a084015250509190921660c08201527fffffffff0000000000000000000000000000000000000000000000000000000090911660e0909101529392505050565b60008261540c5761540c61512f565b500690565b600082821015615423576154236150e6565b500390565b6000808212826001600160ff1b0303841381151615615449576154496150e6565b82600160ff1b038412811615615461576154616150e6565b50500190565b6000826154765761547661512f565b600160ff1b821460001984141615615490576154906150e6565b500590565b60006001600160c01b03808316818114156154b2576154b26150e6565b6001019392505050565b60006001600160c01b038216806154d5576154d56150e6565b6000190192915050565b600080831283600160ff1b018312811516156154fd576154fd6150e6565b836001600160ff1b03018313811615615518576155186150e6565b50500390565b6000600160ff1b821415615534576155346150e6565b5060000390565b6000816000190483118215151615615555576155556150e6565b500290565b634e487b7160e01b600052602160045260246000fd5b60008251615582818460208701614a55565b9190910192915050565b60008161559b5761559b6150e6565b50600019019056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aaf5f98df755a777bf2ab38bf5b0d2b2f9740cb9c1a1c935964c5d11caec024864736f6c63430008090033",
  "devdoc": {
    "details": "DapiServer is a PSP requester contract. Unlike RRP, which is implemented as a central contract, PSP implementation is built into the requester for optimization. Accordingly, the checks that are not required are omitted. Some examples: - While executing a PSP Beacon update, the condition is not verified because Beacon updates where the condition returns `false` (i.e., the on-chain value is already close to the actual value) are not harmful, and are even desirable. - PSP Beacon set update subscription IDs are not verified, as the Airnode/relayer cannot be made to \"misreport a Beacon set update\" by spoofing a subscription ID. - While executing a PSP Beacon set update, even the signature is not checked because this is a purely keeper job that does not require off-chain data. Similar to Beacon updates, any Beacon set update is welcome.",
    "kind": "dev",
    "methods": {
      "addUnlimitedReader(address)": {
        "details": "Since the unlimited reader status cannot be revoked, only contracts that are adequately restricted should be given this status",
        "params": {
          "unlimitedReader": "Unlimited reader address"
        }
      },
      "conditionPspBeaconSetUpdate(bytes32,bytes,bytes)": {
        "details": "The template ID used in the respective Subscription is expected to be zero, which means the `parameters` field of the Subscription will be forwarded to this function as `data`. This field should be the Beacon ID array encoded in contract ABI.",
        "params": {
          "conditionParameters": "Subscription condition parameters (a `uint256` encoded in contract ABI)",
          "data": "Fulfillment data (array of Beacon IDs, i.e., `bytes32[]` encoded in contract ABI)",
          "subscriptionId": "Subscription ID"
        },
        "returns": {
          "_0": "If the Beacon set update subscription should be fulfilled"
        }
      },
      "conditionPspBeaconUpdate(bytes32,bytes,bytes)": {
        "details": "Reverts if not called by a void signer with zero address because this method can be used to indirectly read a Beacon. `conditionParameters` are specified within the `conditions` field of a Subscription.",
        "params": {
          "conditionParameters": "Subscription condition parameters (a `uint256` encoded in contract ABI)",
          "data": "Fulfillment data (an `int256` encoded in contract ABI)",
          "subscriptionId": "Subscription ID"
        },
        "returns": {
          "_0": "If the Beacon update subscription should be fulfilled"
        }
      },
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description",
          "_airnodeProtocol": "AirnodeProtocol contract address",
          "_manager": "Manager address"
        }
      },
      "dapiNameToDataFeedId(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        },
        "returns": {
          "_0": "Data feed ID"
        }
      },
      "dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(bytes32,address,address)": {
        "params": {
          "dataFeedId": "Data feed ID (or dAPI name hash)",
          "reader": "Reader address",
          "setter": "Address of the account that has potentially whitelisted the reader for the data feed indefinitely"
        },
        "returns": {
          "indefiniteWhitelistStatus": "If `setter` has indefinitely whitelisted reader for the data feed"
        }
      },
      "dataFeedIdToReaderToWhitelistStatus(bytes32,address)": {
        "params": {
          "dataFeedId": "Data feed ID (or dAPI name hash)",
          "reader": "Reader address"
        },
        "returns": {
          "expirationTimestamp": "Timestamp at which the whitelisting of the reader will expire",
          "indefiniteWhitelistCount": "Number of times `reader` was whitelisted indefinitely for `dataFeedId`"
        }
      },
      "deriveBeaconId(address,bytes32)": {
        "params": {
          "airnode": "Airnode address",
          "templateId": "Template ID"
        },
        "returns": {
          "beaconId": "Beacon ID"
        }
      },
      "deriveBeaconSetId(bytes32[])": {
        "details": "Notice that `abi.encode()` is used over `abi.encodePacked()`",
        "params": {
          "beaconIds": "Beacon IDs"
        },
        "returns": {
          "beaconSetId": "Beacon set ID"
        }
      },
      "extendWhitelistExpiration(bytes32,address,uint64)": {
        "params": {
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "serviceId": "Service ID",
          "user": "User address"
        }
      },
      "fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "details": "Similar to `conditionPspBeaconSetUpdate()`, if `templateId` of the Subscription is zero, its `parameters` field will be forwarded to `data` here, which is expect to be contract ABI-encoded array of Beacon IDs. It does not make sense for this subscription to be relayed, as there is no external data being delivered. Nevertheless, this is allowed for the lack of a reason to prevent it. Even though the consistency of the arguments are not being checked, if a standard implementation of Airnode is being used, these can be expected to be correct. Either way, the assumption is that it does not matter for the purposes of a Beacon set update subscription.",
        "params": {
          "airnode": "Airnode address",
          "data": "Fulfillment data (an `int256` encoded in contract ABI)",
          "relayer": "Relayer address",
          "signature": "Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet",
          "sponsor": "Sponsor address",
          "subscriptionId": "Subscription ID",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "details": "There is no need to verify that `conditionPspBeaconUpdate()` returns `true` because any Beacon update is a good Beacon update",
        "params": {
          "airnode": "Airnode address",
          "data": "Fulfillment data (a single `int256` encoded in contract ABI)",
          "relayer": "Relayer address",
          "signature": "Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet",
          "sponsor": "Sponsor address",
          "subscriptionId": "Subscription ID",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "fulfillRrpBeaconUpdate(bytes32,uint256,bytes)": {
        "params": {
          "data": "Fulfillment data (an `int256` encoded in contract ABI)",
          "requestId": "Request ID",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "getBalance(address)": {
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Account balance"
        }
      },
      "getBlockBasefee()": {
        "returns": {
          "_0": "Current block basefee"
        }
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "Current block number"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "Current block timestamp"
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "Chain ID"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "readDataFeedValueWithDapiName(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        },
        "returns": {
          "value": "Data feed value"
        }
      },
      "readDataFeedValueWithId(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "value": "Data feed value"
        }
      },
      "readDataFeedWithDapiName(bytes32)": {
        "details": "The read data feed may belong to a Beacon or dAPI. The reader must be whitelisted for the hash of the dAPI name.",
        "params": {
          "dapiName": "dAPI name"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithId(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readerCanReadDataFeed(bytes32,address)": {
        "params": {
          "dataFeedId": "Data feed ID (or dAPI name hash)",
          "reader": "Reader address"
        },
        "returns": {
          "_0": "If the reader can read the data feed"
        }
      },
      "registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)": {
        "details": "Similar to how one needs to call `requestRrpBeaconUpdate()` for this contract to recognize the incoming RRP fulfillment, this needs to be called before the subscription fulfillments. In addition to the subscription being registered, the sponsor must use `setPspSponsorshipStatus()` to give permission for its sponsor wallet to be used for the specific subscription.",
        "params": {
          "airnode": "Airnode address",
          "conditions": "Conditions under which the subscription is requested to be fulfilled",
          "relayer": "Relayer address",
          "sponsor": "Sponsor address",
          "templateId": "Template ID"
        },
        "returns": {
          "subscriptionId": "Subscription ID"
        }
      },
      "requestRrpBeaconUpdate(address,bytes32,address)": {
        "details": "In addition to the sponsor sponsoring this contract (by calling `setRrpSponsorshipStatus()`), the sponsor must also give update request permission to the sender (by calling `setRrpBeaconUpdatePermissionStatus()`) before this method is called. The template must specify a single point of data of type `int256` to be returned and for it to be small enough to be castable to `int224` because this is what `fulfillRrpBeaconUpdate()` expects.",
        "params": {
          "airnode": "Airnode address",
          "sponsor": "Sponsor address",
          "templateId": "Template ID"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "requestRrpBeaconUpdateRelayed(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "relayer": "Relayer address",
          "sponsor": "Sponsor address",
          "templateId": "Template ID"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "revokeIndefiniteWhitelistStatus(bytes32,address,address)": {
        "params": {
          "serviceId": "Service ID",
          "setter": "Setter of the indefinite whitelist status",
          "user": "User address"
        }
      },
      "setDapiName(bytes32,bytes32)": {
        "details": "While a data feed ID refers to a specific Beacon or Beacon set, dAPI names provide a more abstract interface for convenience. This means a dAPI name that was pointing to a Beacon can be pointed to a Beacon set, then another Beacon set, etc.",
        "params": {
          "dapiName": "Human-readable dAPI name",
          "dataFeedId": "Data feed ID the dAPI name will point to"
        }
      },
      "setIndefiniteWhitelistStatus(bytes32,address,bool)": {
        "params": {
          "serviceId": "Service ID",
          "status": "Indefinite whitelist status",
          "user": "User address"
        }
      },
      "setRrpBeaconUpdatePermissionStatus(address,bool)": {
        "params": {
          "rrpBeaconUpdateRequester": "RRP-based Beacon update requester address",
          "status": "Permission status"
        }
      },
      "setWhitelistExpiration(bytes32,address,uint64)": {
        "params": {
          "expirationTimestamp": "Timestamp at which the temporary whitelist will expire",
          "serviceId": "Service ID",
          "user": "User address"
        }
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "details": "This function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. However, this is not the intended use.",
        "params": {
          "beaconIds": "Beacon IDs"
        },
        "returns": {
          "beaconSetId": "Beacon set ID"
        }
      },
      "updateBeaconSetWithBeaconsAndReturnCondition(bytes32[],uint256)": {
        "details": "This method does not allow the caller to indirectly read a Beacon set, which is why it does not require the sender to be a void signer with zero address. This allows the implementation of incentive mechanisms that rewards keepers that trigger valid dAPI updates.",
        "params": {
          "beaconIds": "Beacon IDs",
          "deviationThresholdInPercentage": "Deviation threshold in percentage where 100% is represented as `HUNDRED_PERCENT`"
        }
      },
      "updateBeaconSetWithSignedData(address[],bytes32[],uint256[],bytes[],bytes[])": {
        "params": {
          "airnodes": "Airnode addresses",
          "data": "Response data (an `int256` encoded in contract ABI per Beacon)",
          "signatures": "Template ID, a timestamp and the response data signed by the respective Airnode address per Beacon",
          "templateIds": "Template IDs",
          "timestamps": "Timestamps used in the signatures"
        },
        "returns": {
          "beaconSetId": "Beacon set ID"
        }
      },
      "updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)": {
        "params": {
          "airnode": "Airnode address",
          "data": "Response data (an `int256` encoded in contract ABI)",
          "signature": "Template ID, a timestamp and the response data signed by the Airnode address",
          "templateId": "Template ID",
          "timestamp": "Timestamp used in the signature"
        }
      }
    },
    "stateVariables": {
      "HUNDRED_PERCENT": {
        "details": "10^8 (and not a larger number) is chosen to avoid overflows in `calculateUpdateInPercentage()`. Since the reported data needs to fit into 224 bits, its multiplication by 10^8 is guaranteed not to overflow."
      }
    },
    "title": "Contract that serves Beacons, Beacon sets and dAPIs based on the Airnode protocol",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DAPI_NAME_SETTER_ROLE_DESCRIPTION()": {
        "notice": "dAPI name setter role description"
      },
      "HUNDRED_PERCENT()": {
        "notice": "Number that represents 100%"
      },
      "INDEFINITE_WHITELISTER_ROLE_DESCRIPTION()": {
        "notice": "Indefinite whitelister role description"
      },
      "WHITELIST_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()": {
        "notice": "Whitelist expiration extender role description"
      },
      "WHITELIST_EXPIRATION_SETTER_ROLE_DESCRIPTION()": {
        "notice": "Whitelist expiration setter role description"
      },
      "accessControlRegistry()": {
        "notice": "AccessControlRegistry contract address"
      },
      "addUnlimitedReader(address)": {
        "notice": "Called by the manager to add the unlimited reader indefinitely"
      },
      "adminRole()": {
        "notice": "Admin role"
      },
      "adminRoleDescription()": {
        "notice": "Admin role description"
      },
      "airnodeProtocol()": {
        "notice": "AirnodeProtocol contract address"
      },
      "conditionPspBeaconSetUpdate(bytes32,bytes,bytes)": {
        "notice": "Returns if the respective Beacon set needs to be updated based on the condition parameters"
      },
      "conditionPspBeaconUpdate(bytes32,bytes,bytes)": {
        "notice": "Returns if the respective Beacon needs to be updated based on the fulfillment data and the condition parameters"
      },
      "dapiNameSetterRole()": {
        "notice": "dAPI name setter role"
      },
      "dapiNameToDataFeedId(bytes32)": {
        "notice": "Returns the data feed ID the dAPI name is set to"
      },
      "dataFeedIdToReaderToSetterToIndefiniteWhitelistStatus(bytes32,address,address)": {
        "notice": "Returns if an account has indefinitely whitelisted the reader for the data feed"
      },
      "dataFeedIdToReaderToWhitelistStatus(bytes32,address)": {
        "notice": "Returns the detailed whitelist status of the reader for the data feed"
      },
      "deriveBeaconId(address,bytes32)": {
        "notice": "Derives the Beacon ID from the Airnode address and template ID"
      },
      "deriveBeaconSetId(bytes32[])": {
        "notice": "Derives the Beacon set ID from the Beacon IDs"
      },
      "extendWhitelistExpiration(bytes32,address,uint64)": {
        "notice": "Extends the expiration of the temporary whitelist of `user` to be able to use the service with `serviceId` if the sender has the whitelist expiration extender role"
      },
      "fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon set update subscription"
      },
      "fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon update subscription"
      },
      "fulfillRrpBeaconUpdate(bytes32,uint256,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet through AirnodeProtocol to fulfill the request"
      },
      "getBalance(address)": {
        "notice": "Returns the account balance"
      },
      "getBlockBasefee()": {
        "notice": "Returns the current block basefee"
      },
      "getBlockNumber()": {
        "notice": "Returns the current block number"
      },
      "getBlockTimestamp()": {
        "notice": "Returns the current block timestamp"
      },
      "getChainId()": {
        "notice": "Returns the chain ID"
      },
      "indefiniteWhitelisterRole()": {
        "notice": "Indefinite whitelister role"
      },
      "manager()": {
        "notice": "Address of the manager that manages the related AccessControlRegistry roles"
      },
      "readDataFeedValueWithDapiName(bytes32)": {
        "notice": "Reads the data feed value with dAPI name"
      },
      "readDataFeedValueWithId(bytes32)": {
        "notice": "Reads the data feed value with ID"
      },
      "readDataFeedWithDapiName(bytes32)": {
        "notice": "Reads the data feed with dAPI name"
      },
      "readDataFeedWithId(bytes32)": {
        "notice": "Reads the data feed with ID"
      },
      "readerCanReadDataFeed(bytes32,address)": {
        "notice": "Returns if a reader can read the data feed"
      },
      "registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)": {
        "notice": "Registers the Beacon update subscription"
      },
      "requestRrpBeaconUpdate(address,bytes32,address)": {
        "notice": "Creates an RRP requests for the Beacon to be updated"
      },
      "requestRrpBeaconUpdateRelayed(address,bytes32,address,address)": {
        "notice": "Creates an RRP requests for the Beacon to be updated by the relayer"
      },
      "revokeIndefiniteWhitelistStatus(bytes32,address,address)": {
        "notice": "Revokes the indefinite whitelist status granted by a specific account that no longer has the indefinite whitelister role"
      },
      "setDapiName(bytes32,bytes32)": {
        "notice": "Sets the data feed ID the dAPI name points to"
      },
      "setIndefiniteWhitelistStatus(bytes32,address,bool)": {
        "notice": "Sets the indefinite whitelist status of `user` to be able to use the service with `serviceId` if the sender has the indefinite whitelister role"
      },
      "setRrpBeaconUpdatePermissionStatus(address,bool)": {
        "notice": "Called by the sponsor to set the update request permission status of an account"
      },
      "setWhitelistExpiration(bytes32,address,uint64)": {
        "notice": "Sets the expiration of the temporary whitelist of `user` to be able to use the service with `serviceId` if the sender has the whitelist expiration setter role"
      },
      "sponsorToRrpBeaconUpdateRequesterToPermissionStatus(address,address)": {
        "notice": "If a sponsor has permitted an account to request RRP-based updates at this contract"
      },
      "subscriptionIdToBeaconId(bytes32)": {
        "notice": "ID of the Beacon that the subscription is registered to update"
      },
      "unlimitedReaderStatus(address)": {
        "notice": "If an account is an unlimited reader"
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "notice": "Updates the Beacon set using the current values of its Beacons"
      },
      "updateBeaconSetWithBeaconsAndReturnCondition(bytes32[],uint256)": {
        "notice": "Updates the Beacon set using the current values of the Beacons and returns if this update was justified according to the deviation threshold"
      },
      "updateBeaconSetWithSignedData(address[],bytes32[],uint256[],bytes[],bytes[])": {
        "notice": "Updates a Beacon set using data signed by the respective Airnodes without requiring a request or subscription. The Beacons for which the signature is omitted will be read from the storage."
      },
      "updateBeaconWithSignedData(address,bytes32,uint256,bytes,bytes)": {
        "notice": "Updates a Beacon using data signed by the respective Airnode, without requiring a request or subscription"
      },
      "whitelistExpirationExtenderRole()": {
        "notice": "Whitelist expiration extender role"
      },
      "whitelistExpirationSetterRole()": {
        "notice": "Whitelist expiration setter role"
      }
    },
    "notice": "A Beacon is a live data feed addressed by an ID, which is derived from an Airnode address and a template ID. This is suitable where the more recent data point is always more favorable, e.g., in the context of an asset price data feed. Beacons can also be seen as one-Airnode data feeds that can be used individually or combined to build Beacon sets. dAPIs are an abstraction layer over Beacons and Beacon sets.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4223,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "serviceIdToUserToWhitelistStatus",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)4216_storage))"
      },
      {
        "astId": 4231,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "serviceIdToUserToSetterToIndefiniteWhitelistStatus",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 18,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 360,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "unlimitedReaderStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 368,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "sponsorToRrpBeaconUpdateRequesterToPermissionStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 374,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "subscriptionIdToBeaconId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 379,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "dataFeeds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(DataFeed)341_storage)"
      },
      {
        "astId": 383,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "requestIdToBeaconId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 387,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "subscriptionIdToHash",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 391,
        "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
        "label": "dapiNameHashToDataFeedId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int224": {
        "encoding": "inplace",
        "label": "int224",
        "numberOfBytes": "28"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(WhitelistStatus)4216_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Whitelist.WhitelistStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(WhitelistStatus)4216_storage"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(WhitelistStatus)4216_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct Whitelist.WhitelistStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(WhitelistStatus)4216_storage)"
      },
      "t_mapping(t_bytes32,t_struct(DataFeed)341_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DapiServer.DataFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(DataFeed)341_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DataFeed)341_storage": {
        "encoding": "inplace",
        "label": "struct DapiServer.DataFeed",
        "members": [
          {
            "astId": 338,
            "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_int224"
          },
          {
            "astId": 340,
            "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WhitelistStatus)4216_storage": {
        "encoding": "inplace",
        "label": "struct Whitelist.WhitelistStatus",
        "members": [
          {
            "astId": 4213,
            "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
            "label": "expirationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4215,
            "contract": "@api3/airnode-protocol-v1/contracts/dapis/DapiServer.sol:DapiServer",
            "label": "indefiniteWhitelistCount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
