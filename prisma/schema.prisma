generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

generator PrismaTypeGraphQLTypesGenerator {
  provider     = "yarn prisma-typegraphql-types-generator"
  modelsOutput = "./src/models" // Optional defaults to "./src/generated/models"
  enumsOutput  = "./src/types/enums" // Optional defaults to "./src/generated/enums"
  useYarn      = true // Optional if you want `graphql-scalars` installation to be done via yarn defaults to "npm"
  //exportedNameSuffix = "GQL" // Optional if you want to add a suffix to the end of your exported class names and enums
  //exportedNamePrefix = "TYPE" // Optional if you want to prefix your exported class names and enums
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // eg = "postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public"
}

// Notes
// Postgres DOMAIN not supported :( https://github.com/prisma/prisma/issues/1796
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#postgresql
// have to create checks as a migration

model Provider {
  name                  String   @id @db.Text
  active                Boolean  @db.Boolean
  description           String   @db.Text
  homepage              String   @db.Text
  airnodeAddress        String   @db.Text // evm address constraint
  xpub                  String   @db.Text
  logoPath              String   @db.Text
  maxSubscriptionPeriod Int
  Beacon                Beacon[]
}

model Beacon {
  beaconId     String         @id @db.Text
  name         String         @unique @db.Text
  description  String
  provider     Provider       @relation(fields: [providerName], references: [name])
  template     Template       @relation(fields: [templateId], references: [templateId])
  templateId   String
  BeaconChains BeaconChains[]
  providerName String         @db.Text
}

model Chain {
  name         String         @id
  BeaconChains BeaconChains[]
}

enum WalletType {
  Provider
  ProviderSponsor
  API3
  API3Sponsor
}

model TopUpWallet {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  address      String
  walletType   WalletType
  BeaconChains BeaconChains[]
}

model Template {
  templateId String   @id
  name       String   @unique
  endpointId String
  parameters String
  Beacon     Beacon[]
}

model BeaconChains {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  beacon          Beacon      @relation(fields: [beaconId], references: [beaconId])
  beaconId        String
  chain           Chain       @relation(fields: [chainName], references: [name])
  chainName       String
  active          Boolean
  sponsor         String
  topUpWallet     TopUpWallet @relation(fields: [topUpWalletId], references: [id])
  topUpWalletId   String      @db.Uuid
  airSeekerConfig Json
}

model OIS {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ois        Json
  Deployment Deployment[]
}

model Deployment {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chainApiReference String
  airnodeVersion    String
  config            Json
  ois               OIS    @relation(fields: [oisId], references: [id])
  oisId             String @db.Uuid
}
